// Stock-alike Station Parts Expansion

// ============================================================================
// region Life Support
// ============================================================================
@PART[sspx-inflatable-cen*,sspx-expandable-cen*]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	// Kerbalism forces the habitat to be inflated if kerbals are inside
	@CrewCapacity = #$MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$

	MODULE
	{
		name = ProcessController
		resource = _Scrubber
		title = Scrubber
		capacity = #$../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _PressureControl
		title = Pressure control
		capacity = #$../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _WaterRecycler
		title = Water recycler
		capacity = #$../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _WasteProcessor
		title = Waste processor
		capacity = #$../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _MonopropFuelCell
		title = Monoprop+O2 fuel cell
		capacity = #$../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
		running = false
	}

	@MODULE[ProcessController],*
	{
		@capacity *= 1.67
	}

	MODULE
	{
		name = Configure
		title = Pod
		slots = 0

		UPGRADES
		{
			UPGRADE
			{
				name__ = Upgrade-Slots
				techRequired__ = electronics
				slots = 2
			}
		}

		SETUP
		{
			name = Scrubber
			desc = A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Scrubber
			}
		}

		SETUP
		{
			name = Pressure Control
			desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
			tech = engineering101
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _PressureControl
			}

			RESOURCE
			{
				name = Nitrogen
				amount = #$../../../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
				maxAmount = #$../../../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
				@amount *= 500
				@maxAmount *= 500
			}
		}

		SETUP
		{
			name = Water Recycler
			desc = Filter impurities out of <b>WasteWater</b>.
			tech = spaceExploration
			mass = 0.05
			cost = 500


			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _WaterRecycler
			}

			RESOURCE
			{
				name = WasteWater
				amount = 0
				maxAmount = #$../../../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
				@maxAmount *= 5
			}
		}

		SETUP
		{
			name = Waste Processor
			desc = Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
			tech = advExploration
			mass = 0.05
			cost = 500

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _WasteProcessor
			}

			RESOURCE
			{
				name = Waste
				amount = 0
				maxAmount = #$../../../MODULE[ModuleDeployableCentrifuge]/DeployedCrewCapacity$
				@maxAmount *= 5
			}
		}

		SETUP
		{
			name = Monoprop Oxygen Fuel Cell
			desc = An emergency fuel cell that burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
			tech = advElectrics
			mass = 0.1
			cost = 1000

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _MonopropFuelCell
			}
		}
	}
}

@PART[sspx-inflatable-hab*]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	// Kerbalism forces the habitat to be inflated if kerbals are inside
	@CrewCapacity = #$MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$

	MODULE
	{
		name = ProcessController
		resource = _Scrubber
		title = Scrubber
		capacity = #$../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _PressureControl
		title = Pressure control
		capacity = #$../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _WaterRecycler
		title = Water recycler
		capacity = #$../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _WasteProcessor
		title = Waste processor
		capacity = #$../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
		running = true
	}

	MODULE
	{
		name = ProcessController
		resource = _MonopropFuelCell
		title = Monoprop+O2 fuel cell
		capacity = #$../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
		running = false
	}

	@MODULE[ProcessController],*
	{
		@capacity *= 1.67
	}

	MODULE
	{
		name = Configure
		title = Pod
		slots = 0

		UPGRADES
		{
			UPGRADE
			{
				name__ = Upgrade-Slots
				techRequired__ = electronics
				slots = 2
			}
		}

		SETUP
		{
			name = Scrubber
			desc = A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _Scrubber
			}
		}

		SETUP
		{
			name = Pressure Control
			desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
			tech = engineering101
			mass = 0.01
			cost = 250

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _PressureControl
			}

			RESOURCE
			{
				name = Nitrogen
				amount = #$../../../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
				maxAmount = #$../../../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
				@amount *= 500
				@maxAmount *= 500
			}
		}

		SETUP
		{
			name = Water Recycler
			desc = Filter impurities out of <b>WasteWater</b>.
			tech = spaceExploration
			mass = 0.05
			cost = 500


			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _WaterRecycler
			}

			RESOURCE
			{
				name = WasteWater
				amount = 0
				maxAmount = #$../../../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
				@maxAmount *= 5
			}
		}

		SETUP
		{
			name = Waste Processor
			desc = Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
			tech = advExploration
			mass = 0.05
			cost = 500

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _WasteProcessor
			}

			RESOURCE
			{
				name = Waste
				amount = 0
				maxAmount = #$../../../MODULE[ModuleDeployableHabitat]/DeployedCrewCapacity$
				@maxAmount *= 5
			}
		}

		SETUP
		{
			name = Monoprop Oxygen Fuel Cell
			desc = An emergency fuel cell that burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
			tech = advElectrics
			mass = 0.1
			cost = 1000

			MODULE
			{
				type = ProcessController
				id_field = resource
				id_value = _MonopropFuelCell
			}
		}
	}
}
// end

// ============================================================================
// region Habitat (Inflatable)
// ============================================================================
@PART[sspx-inflatable-hab*]:NEEDS[StationPartsExpansionRedux,FeatureHabitat]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = Habitat
		inflate = Expand
		state = disabled
		animBackwards = True
	}

	!MODULE[ModuleDeployableHabitat] {} // Functionality is replaced by ModuleHabitat
}
// end

// ============================================================================
// region Habitat + Gravity Ring
// ============================================================================
@PART[sspx-inflatable-centrifuge-125-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
  @mass = 3.0 // kerbalism gravity ring weight 3.5 t for 65m3

	MODULE
	{
		name = GravityRing
		ec_rate = 2.5
		animBackwards = True
		deploy = Expand
		rotate = SpinCenter
		deployed = False
		rotateIsTransform = True
		SpinRate = 42

		counterWeightRotate = SpinCenterCounter
		counterWeightSpinRate = -84.0
		counterWeightSpinAccelerationRate = 2.0
	}

	// Habitat module must be defined after the GravityRing
	MODULE
	{
		name = Habitat
		state = disabled
		inflatableUsingRigidWalls = True
		volume = 36.0
		surface = 85.0
	}
  
	!MODULE[ModuleDeployableCentrifuge] {} // Functionality is replaced by ModuleHabitat
}

@PART[sspx-inflatable-centrifuge-125-2]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
  @mass = 2.5 // kerbalism gravity ring weight 3.5 t for 65m3

	MODULE
	{
		name = GravityRing
		ec_rate = 2.5
		animBackwards = True
		deploy = Expand
		rotate = CompactSpinCentre
		deployed = False
		rotateIsTransform = True

		counterWeightRotate = CounterWeight
		counterWeightSpinRate = -70
		counterWeightSpinAccelerationRate = 2
	}

	// Habitat module must be defined after the GravityRing
	MODULE
	{
		name = Habitat
		state = disabled
		inflatableUsingRigidWalls = False
		volume = 19.0
		surface = 55.0
	}
	!MODULE[ModuleDeployableCentrifuge] {} // Functionality is replaced by ModuleHabitat
}

@PART[sspx-inflatable-centrifuge-25-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
  @mass = 5.0 // kerbalism gravity ring weight 3.5 t for 65m3

	MODULE
	{
		name = GravityRing
		ec_rate = 2.5
		animBackwards = True
		deploy = Expand
		rotate = B_Rotation
		rotateIsTransform = True
		SpinRate = 45
		SpinAccelerationRate = 1

		counterWeightRotate = 25mTorusCounterweight
		counterWeightSpinRate = -90
		counterWeightSpinAccelerationRate = 2
	}
  
	// Habitat module must be defined after the GravityRing
	MODULE
	{
		name = Habitat
		state = disabled
		inflatableUsingRigidWalls = True
		volume = 85
		surface = 180.0
	}

	!MODULE[ModuleDeployableCentrifuge] {} // Functionality is replaced by ModuleHabitat
}

@PART[sspx-expandable-centrifuge-375-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = GravityRing
		ec_rate = 2.5
		animBackwards = True
		deploy = CentrifugeCollapse
		rotate = B_Center
		deployed = False
		rotateIsTransform = True
		SpinRate = 35

		counterWeightRotate = Counterweight
		counterWeightSpinRate = -70
		counterWeightSpinAccelerationRate = 2
	}
  
	// Habitat module must be defined after the GravityRing
	MODULE
	{
		name = Habitat
		state = disabled
		inflatableUsingRigidWalls = True
		inflateRequiresPressure = False
		canRetract = True
		volume = 260.0
		surface = 450.0
	}

	!MODULE[ModuleDeployableCentrifuge] {} // Functionality is replaced by ModuleHabitat
}

@PART[sspx-expandable-centrifuge-375-2]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = GravityRing
		ec_rate = 2.5
		animBackwards = True
		deploy = Retract
		rotate = SpinCenter
		deployed = False
		rotateIsTransform = True
		SpinRate = 25

		counterWeightRotate = Counterweights
		counterWeightSpinRate = -70
		counterWeightSpinAccelerationRate = 2
	}
  
	// Habitat module must be defined after the GravityRing
	MODULE
	{
		name = Habitat
		state = disabled
		inflatableUsingRigidWalls = True
		inflateRequiresPressure = False
		canRetract = True
		volume = 110.0
		surface = 190.0
	}

	!MODULE[ModuleDeployableCentrifuge] {} // Functionality is replaced by ModuleHabitat
}

@PART[sspx-expandable-centrifuge-5-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = GravityRing
		ec_rate = 2.5
		animBackwards = True
		deploy = CentrifugeCollapse
		rotate = B_SpinCore
		deployed = False
		rotateIsTransform = True
		SpinRate = -35
		SpinAccelerationRate = 1

		counterWeightRotate = B_Counterweight
		counterWeightSpinRate = 70.0
		counterWeightSpinAccelerationRate = 2
	}
  
	// Habitat module must be defined after the GravityRing
	MODULE
	{
		name = Habitat
		state = disabled
		inflatableUsingRigidWalls = True
		inflateRequiresPressure = False
		canRetract = True
		volume = 350.0
		surface = 530.0
	}

	!MODULE[ModuleDeployableCentrifuge] {} // Functionality is replaced by ModuleHabitat
}
// end

// ============================================================================
// region Comfort providers
// ============================================================================
@PART[sspx-observation-25-1|sspx-cupola-125-1|sspx-cupola-375-1|sspx-cupola-1875-1|sspx-dome-cupola-5-1|sspx-cupola-telescope-125-1|sspx-cupola-greenhouse-125-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = The very best space observation experience.
		bonus = panorama
	}

	@tags ^= :$: comfort:
}

@PART[sspx-habitation-375-1|sspx-habitation-375-2|sspx-habitation-375-3|sspx-habitation-5-1|sspx-habitation-5-2|sspx-dome-habitation-5-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = It has included a rotation system that simulates gravity. The crew will love it.
		bonus = exercise
	}

	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = Comfort
		title = Treadmill
		repair = Engineer
		mtbf = 36288000
		extra_cost = 0.25
		extra_mass = 0.05
	}
}

@PART[sspx-inflatable-hab-25-1|sspx-inflatable-hab-25-2]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = A treadmill designed to permit exercise in zero-g is included. The crew will love it.
		bonus = exercise
	}

	MODULE:NEEDS[FeatureReliability]
	{
		name = Reliability
		type = Comfort
		title = Treadmill
		repair = Engineer
		mtbf = 36288000
		extra_cost = 0.25
		extra_mass = 0.05
	}
}

// Don't forget that those centrifuges have exercise areas too!
@PART[sspx-inflatable-centrifuge-25-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = Some low-g exercise equipment is included. The crew will love it.
		bonus = exercise
	}
}

// centrifuge has both confort (panorama & exercise)
@PART[sspx-expandable-centrifuge-375-*]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = Some low-g exercise equipment is included. The crew will love it.
		bonus = exercise
	}

	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = The very best space observation experience.
		bonus = panorama
	}
}

@PART[sspx-expandable-centrifuge-5-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = Some low-g exercise equipment is included. The crew will love it.
		bonus = exercise
	}
		MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		desc = The very best space observation experience.
		bonus = panorama
	}
}
// end

// ============================================================================
// region Sickbay
// added by Gordon Dry
// ============================================================================

@PART[sspx-habitation-125-1|sspx-habitation-1875-1|sspx-habitation-1875-2|sspx-habitation-25-1|sspx-habitation-5-1|sspx-habitation-5-2|sspx-dome-habitation-5-1]:NEEDS[StationPartsExpansionRedux,FeatureHabitat,FeatureRadiation]:FOR[zzzKerbalismDefault]
{
	%AddConfigurableSickbay = true
	%AddSickbayRDU = true
}

// ============================================================================
// region Recyclers
// ============================================================================
@PART[sspx-utility-125-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault,FeatureRadiation]:AFTER[zzzKerbalismDefault]
{
	// since this part contains an active shield, it needs a big NERF:
	// available only together with kerbalisms active shield
	// pricing adjusted, the part was way too cheap
	@TechRequired = experimentalScience
	@entryCost = 65000 
	@cost = 15000

	MODULE
	{
		name = Emitter
		radiation = -0.0000005555 // -0.002 rad/h
		toggle = true
		ec_rate = 1.25
		active = e10
	}
}

@PART[sspx-utility-125-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault,FeatureReliability]:AFTER[zzzKerbalismDefault]
{
	MODULE
	{
		name = Reliability
		type = Emitter
		title = Shield
		repair = Engineer
		mtbf = 72576000
		extra_cost = 2.5
		extra_mass = 0.1
	}
}
// end

// ============================================================================
// region Greenhouses
// ============================================================================
@PART[sspx-greenhouse-25-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = Greenhouse
		crop_resource = Food								// name of resource produced by harvests
		// Twice as effective as kerbalism-greenhouse part. 
		// See https://forum.kerbalspaceprogram.com/index.php?/topic/172400-131145-kerbalism-v180/&page=32&tab=comments#comment-3446891 for details.

		// This greenhouse has 18 independent sections! It's 18 staged crops in rotation. Almost non-stop production, but each harvest is 18 times smaller.
		crop_size = 3.0625									// 18 times less harvest than 2x"kerbalism-greenhouse"
		crop_rate = 0.00000416664					 // but you can harvest 18 times more often due to independent sections!
		ec_rate = 5												 // 2x"kerbalism-greenhouse"
		light_tolerance = 400.0						 // minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1						// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 // maximum radiation allowed for growth in rad/s, considered after shielding is applied
		shutters = 25DoorsOpen							// animation to manipulate shutters
		animBackwards = True

		INPUT_RESOURCE
		{
			name = Ammonia
			rate = 0.00019140625							// 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.0000063802							 // 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = WasteAtmosphere						// Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
			rate = 0.0024915995							 // 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = CarbonDioxide							// Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
																				// present then it will be used in place of CO2 injection
			rate = 0.00083053315							// 2x"kerbalism-greenhouse"
		}

		// Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
		// CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
		// If there is not enough resources then the plants will suffer.

		OUTPUT_RESOURCE
		{
			name = Oxygen
			rate = 0.0034475965							 // 200% of oxygen required by 1 crew member
		}
	}

	RESOURCE
	{
		name = Ammonia
		amount = 544												// 2x"kerbalism-greenhouse"
		maxAmount = 544
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 9000											 // 2x"kerbalism-greenhouse"
		maxAmount = 9000
	}

	// To support pressure control
	@MODULE[Configure]
	{
		@SETUP[Pressure?Control]
		{
			!RESOURCE[Nitrogen] {}
		}
	}

	RESOURCE
	{
		name = Nitrogen
		amount = 10000											// 1x"kerbalism-greenhouse" as it does not mess with crops
		maxAmount = 10000
	}

	RESOURCE
	{
		name = Water
		amount = 22												 // 2x"kerbalism-greenhouse"
		maxAmount = 22
	}

	!MODULE[ModuleAnimateGeneric] {}			// Greenhouse handles animation
}

@PART[sspx-greenhouse-375-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = Greenhouse

		crop_resource = Food								// name of resource produced by harvests
		// Twice as effective as kerbalism-greenhouse part. 
		// See https://forum.kerbalspaceprogram.com/index.php?/topic/172400-131145-kerbalism-v180/&page=32&tab=comments#comment-3446891 for details.

		// Both growing "rings" of this greenhouse are unfortunately in the same section. No independent growing possible. (Different watering and lighting needs for different grow stages). 
		crop_size = 55.125									// 2x kerbalism-greenhouse
		crop_rate = 0.00000023148					 // regular growth speed
		ec_rate = 5												 // 2x"kerbalism-greenhouse"
		light_tolerance = 400.0						 // minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1						// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 // maximum radiation allowed for growth in rad/s, considered after shielding is applied

		INPUT_RESOURCE
		{
			name = Ammonia
			rate = 0.00019140625							// 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.0000063802							 // 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = WasteAtmosphere						// Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
			rate = 0.0024915995							 // 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = CarbonDioxide							// Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
																				// present then it will be used in place of CO2 injection
			rate = 0.00083053315							// 2x"kerbalism-greenhouse"
		}

		// Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
		// CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
		// If there is not enough resources then the plants will suffer.

		OUTPUT_RESOURCE
		{
			name = Oxygen
			rate = 0.0034475965							 // 200% of oxygen required by 1 crew member
		}
	}

	//	Concider those nice IVA tanks and closets for increasing current resource capacity. I won't touch em for now.
	RESOURCE
	{
		name = Ammonia
		amount = 544												// 2x"kerbalism-greenhouse"
		maxAmount = 544
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 9000											 // 2x"kerbalism-greenhouse"
		maxAmount = 9000
	}

	// To support pressure control
	@MODULE[Configure]
	{
		@SETUP[Pressure?Control]
		{
		!RESOURCE[Nitrogen] {}
		}
	}

	RESOURCE
	{
		name = Nitrogen
		amount = 10000											// 1x"kerbalism-greenhouse" as it does not mess with crops
		maxAmount = 10000
	}

	RESOURCE
	{
		name = Water
		amount = 22												 // 2x"kerbalism-greenhouse"
		maxAmount = 22
	}
}

@PART[sspx-greenhouse-5-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
		MODULE
	{
		name = Greenhouse
		crop_resource = Food								// name of resource produced by harvests
		// 12 as effective as kerbalism-greenhouse part. 
		// See https://forum.kerbalspaceprogram.com/index.php?/topic/172400-131145-kerbalism-v180/&page=32&tab=comments#comment-3446891 for details.

		// This greenhouse has 2 sections! 2 staged crops in rotation, each harvest is 2 times smaller.
		crop_size = 165.375									// 2 times less harvest than 12x"kerbalism-greenhouse"
		crop_rate = 0.00000046296					 // but you can harvest 2 times more often due to independent sections!
		ec_rate = 30												 // 12x"kerbalism-greenhouse"
		light_tolerance = 400.0						 // minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1						// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 // maximum radiation allowed for growth in rad/s, considered after shielding is applied

		INPUT_RESOURCE
		{
			name = Ammonia
			rate = 0.0011484375							// 12x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.0000382812							 // 12x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = WasteAtmosphere						// Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
			rate = 0.0149495970							 // 12x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = CarbonDioxide							// Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
																				// present then it will be used in place of CO2 injection
			rate = 0.00498319890							// 12x"kerbalism-greenhouse"
		}

		// Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
		// CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
		// If there is not enough resources then the plants will suffer.

		OUTPUT_RESOURCE
		{
			name = Oxygen
			rate = 0.020685579							 // 1200% of oxygen required by 1 crew member
		}
	}

	RESOURCE
	{
		name = Ammonia
		amount = 3264												// 12x"kerbalism-greenhouse"
		maxAmount = 3264
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 54000											 // 12x"kerbalism-greenhouse"
		maxAmount = 54000
	}

	// To support pressure control
	@MODULE[Configure]
	{
		@SETUP[Pressure?Control]
		{
			!RESOURCE[Nitrogen] {}
		}
	}

	RESOURCE
	{
		name = Nitrogen
		amount = 10000											// 1x"kerbalism-greenhouse" as it does not mess with crops
		maxAmount = 10000
	}

	RESOURCE
	{
		name = Water
		amount = 132												 // 12x"kerbalism-greenhouse"
		maxAmount = 132
	}

}

@PART[sspx-dome-greenhouse-5-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = Greenhouse

		crop_resource = Food								// name of resource produced by harvests
		// Twice as effective as kerbalism-greenhouse part. 
		// See https://forum.kerbalspaceprogram.com/index.php?/topic/172400-131145-kerbalism-v180/&page=32&tab=comments#comment-3446891 for details.

		// This is a surface greenhouse. For the time, it acts as the 375m greenhouse, as it cant have different crops, so just 1 big harvest. 
		crop_size = 55.125									// 2x kerbalism-greenhouse
		crop_rate = 0.00000023148					 // regular growth speed
		ec_rate = 5												 // 2x"kerbalism-greenhouse"
		light_tolerance = 400.0						 // minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1						// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 // maximum radiation allowed for growth in rad/s, considered after shielding is applied

		INPUT_RESOURCE
		{
			name = Ammonia
			rate = 0.00019140625							// 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.0000063802							 // 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = WasteAtmosphere						// Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
			rate = 0.0024915995							 // 2x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = CarbonDioxide							// Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
																				// present then it will be used in place of CO2 injection
			rate = 0.00083053315							// 2x"kerbalism-greenhouse"
		}

		// Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
		// CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
		// If there is not enough resources then the plants will suffer.

		OUTPUT_RESOURCE
		{
			name = Oxygen
			rate = 0.0034475965							 // 200% of oxygen required by 1 crew member
		}
	}

	//	Concider those nice IVA tanks and closets for increasing current resource capacity. I won't touch em for now.
	RESOURCE
	{
		name = Ammonia
		amount = 544												// 2x"kerbalism-greenhouse"
		maxAmount = 544
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 9000											 // 2x"kerbalism-greenhouse"
		maxAmount = 9000
	}

	// To support pressure control
	@MODULE[Configure]
	{
		@SETUP[Pressure?Control]
		{
		!RESOURCE[Nitrogen] {}
		}
	}

	RESOURCE
	{
		name = Nitrogen
		amount = 10000											// 1x"kerbalism-greenhouse" as it does not mess with crops
		maxAmount = 10000
	}

	RESOURCE
	{
		name = Water
		amount = 22												 // 2x"kerbalism-greenhouse"
		maxAmount = 22
	}
}

@PART[sspx-cupola-greenhouse-125-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = Greenhouse

		crop_resource = Food								// name of resource produced by harvests
		// 1/6 as effective as kerbalism-greenhouse part. 
		// See https://forum.kerbalspaceprogram.com/index.php?/topic/172400-131145-kerbalism-v180/&page=32&tab=comments#comment-3446891 for details.

		// No independent growing possible. (Different watering and lighting needs for different grow stages). 
		crop_size = 4.59375						// 1/3x kerbalism-greenhouse
		crop_rate = 0.00000023148					// regular growth speed
		ec_rate = 0.833							// 1/6x"kerbalism-greenhouse"
		light_tolerance = 400.0						// minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1						// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 // maximum radiation allowed for growth in rad/s, considered after shielding is applied

		INPUT_RESOURCE
		{
			name = Ammonia
			rate = 0.000015950520835						// 1/6x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.0000005316835							 // 1/6x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = WasteAtmosphere						// Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
			rate = 0.0002076332917							 // 1/6x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = CarbonDioxide							// Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
																				// present then it will be used in place of CO2 injection
			rate = 0.000069211095835						// 1/6x"kerbalism-greenhouse"
		}

		// Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
		// CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
		// If there is not enough resources then the plants will suffer.

		OUTPUT_RESOURCE
		{
			name = Oxygen
			rate = 0.00028729970835							 // 33.3334% of oxygen required by 1 crew member
		}
	}

	
	RESOURCE
	{
		name = Ammonia
		amount = 45										// nearly 1/6x"kerbalism-greenhouse" since weird decimal nubers look weird on ressource tanks. would be ~90.6667
		maxAmount = 45
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 750											 // 1/6x"kerbalism-greenhouse"
		maxAmount = 750
	}

	// To support pressure control
	@MODULE[Configure]
	{
		@SETUP[Pressure?Control]
		{
		!RESOURCE[Nitrogen] {}
		}
	}

	RESOURCE
	{
		name = Nitrogen
		amount = 2000											// reduced, because where would you fit such large tanks in such a small cupola?
		maxAmount = 2000
	}

	RESOURCE
	{
		name = Water
		amount = 2												 // nearly 1/6x"kerbalism-greenhouse" since weird decimal nubers look weird on ressource tanks. would be ~1.8334
		maxAmount = 2
	}
}

// The fish tank is different from all the others. I decided it gets 4x kerbalism greenhouse ("kg") / 2x 375-1 greenhouse food production.
// It is now some sort of direct Waste-converter, as i imagine some fish species can use the biomatter contained in waste more efficiently than just extracting the wastes nh3
// Uses 2 Kerbals worth of Waste as fish-fodder, plus algae from integrated tanks that are as effective as 1x "kg" in both input and output
// The fish however only consume/produce 1.75 Kerbals worth of co2/o2 while ingesting 2 Kerbals of food per day (not actual biomass of a Kerbal, the amount of food eaten by one per day)
// I suspect growing lifeforms exhale a lower percentage of their ingested carbon as co2, than fully grown individuals of their kind,
// because at least some of that carbon  needs to be integrated into their bodies for growing.

@PART[sspx-aquaculture-375-1]:NEEDS[StationPartsExpansionRedux,ProfileDefault]:AFTER[KerbalismDefault]
{
	MODULE
	{
		name = Greenhouse

		crop_resource = Food								// name of resource produced by harvests
		// Twice as effective as kerbalism-greenhouse part. 
		// See https://forum.kerbalspaceprogram.com/index.php?/topic/172400-131145-kerbalism-v180/&page=32&tab=comments#comment-3446891 for details.

		// Aquaculture module; produces food for 2 kerbals, co2 for 0.416667 (included algae tanks i guess) 
		// consumes waste of 2 kerbals + ammonia of 1x kerbalism-greenhouse (for algae), o2 of 0.75 kerbals, some water and ec
		// somewhat higher food per ammonia ratio than traditional greenhouses, 0.0957 food/nh3 instead of 0.0667 food/nh3

		crop_size = 58.7087						// slightly faster than 1x kerbalism-greenhouse to match changed growth speed, would be 234.8312 if treated as one tank
		crop_rate = 0.0000004347					// way faster growth speed, would be 0.000000108675 if treated as one tank, one kerbin year growth cycle, 1/4 bc 4 tanks
		ec_rate = 20							// 8x"kerbalism-greenhouse" bc of more expensive pumping, filtration, and temp regulation needs
		light_tolerance = 400.0						// minimum lighting flux required for growth, in W/m^2
		pressure_tolerance = 0.1					// minimum pressure required for growth, in sea level atmospheres
		radiation_tolerance = 0.000008333	 			// maximum radiation allowed for growth in rad/s, considered after shielding is applied

		INPUT_RESOURCE
		{
			name = Waste
			rate = 0.000009104939					// 2x kerbal
		}

		INPUT_RESOURCE
		{
			name = Ammonia
			rate = 0.000095703125					// 1x"kerbalism-greenhouse"
		}

		INPUT_RESOURCE
		{
			name = Water
			rate = 0.00000382812					// 1.2x"kerbalism-greenhouse". 1x for Photosynthesis of algae. 0.2x for fish. Water is filtered so less water consumed. I dont know how much water fish actually drink, and dont pee out again
		}

//		INPUT_RESOURCE
//		{
//			name = Atmosphere					// Fish work on Atmosphere, if not enough Atmosphere exists then O2 is used, 
										// does this work? no it doesnt, and i dont know how to make it work. System seems to only work with WasteAtmosphere/CO2
//			rate = 0.001868699625					// 1.5x"kerbalism-greenhouse"
//		}

		INPUT_RESOURCE
		{
			name = Oxygen						// (in theory) If excess Atmosphere is present then it will be used in place of O2 injection
			rate = 0.0012928486875					// 0.75x"kerbalism-greenhouse (kg)" Accounting for 1x "kg" production from algae tanks and 1.75x "kg" consumption from fish
		}

		// (again, in theory) Note. if there is a deficiency in the amount of Atmosphere needed then the missing amount of Atmosphere will be added to the
		// Oxygen input and Vies Versa if not enough Oxygen is present and there is extra Atmosphere.
		// If there is not enough resources then the fish will suffer.

		OUTPUT_RESOURCE
		{
			name = CarbonDioxide					// 1 kerbalism greenhouse co2 equivalent input per second: 0.001661066325
			rate = 0.0005190832265625				// 41.6667% of CarbonDioxide produced by 1 crew member, or 31.25% "kg". Algae consume 1x "kg"/1.3334x Kerbal worth of co2. Fish produce 1.75 Kerbals / 1.3125x "kg" co2
		}
	}

	// Concider those nice IVA tanks and closets for increasing current resource capacity. I won't touch em for now.
	RESOURCE
	{
		name = Ammonia
		amount = 544							// 2x"kerbalism-greenhouse"
		maxAmount = 544
	}

	RESOURCE
	{
		name = Oxygen
		amount = 9000							// 2x"kerbalism-greenhouse"
		maxAmount = 9000
	}

	RESOURCE
	{
		name = CarbonDioxide
		amount = 0							// 2x"kerbalism-greenhouse"
		maxAmount = 9000
	}

	// To support pressure control
	@MODULE[Configure]
	{
		@SETUP[Pressure?Control]
		{
		!RESOURCE[Nitrogen] {}
		}
	}

	RESOURCE
	{
		name = Nitrogen
		amount = 10000							// 1x"kerbalism-greenhouse" as it does not mess with crops
		maxAmount = 10000
	}

	RESOURCE
	{
		name = Water
		amount = 22							// 2x"kerbalism-greenhouse"
		maxAmount = 22
	}
}
// ============================================================================
// region Containers
// ============================================================================
@PART[sspx-cargo-container*]:NEEDS[StationPartsExpansionRedux,B9PartSwitch,CommunityResourcePack,!ProfileNone]:AFTER[zzzKerbalismDefault]
{
	@MODULE[ModuleB9PartSwitch]:HAS[!SUBTYPE[Food]]
	{
		SUBTYPE
		{
			name = Food
			tankType = Food
			title = Food
			transform = SnacksDecal
		}
	}
	@MODULE[ModuleB9PartSwitch]:HAS[!SUBTYPE[Supplies]]
	{
		SUBTYPE
		{
			name = Supplies
			tankType = Supplies
			title = Supplies
			transform = SuppliesDecal
		}
	}
	@MODULE[ModuleB9PartSwitch]:HAS[!SUBTYPE[Waste]]
	{
		SUBTYPE
		{
			name = Waste
			tankType = Waste
			title = Waste
			transform = LifeSupportDecal
		}
	}
}
// end

// ============================================================================
// confort plants
// ============================================================================

@PART[sspx-greenhouse-5-1|sspx-dome-greenhouse-5-1|sspx-cupola-greenhouse-125-1|sspx-greenhouse-25-1|sspx-greenhouse-375-1]:NEEDS[StationPartsExpansionRedux,FeatureComfort]:AFTER[KerbalismDefault]
{
	MODULE:NEEDS[FeatureComfort]
	{
		name = Comfort
		bonus = plants
		desc =  There's something inherently calming about an artificial slice of nature, kept alive only by the miracles of duct-tape and kerbal engineering. Let's hope the crew doesn't think too much about it.
	}

	@tags ^= :$: comfort:
}

//end

// ============================================================================
// habitats for pressurized structural parts
// ============================================================================

// Habitats for rigid pressurized crew tubes, such as sspx-tube-1875-angled-1 and sspx-tube-1875-2
@PART[sspx-tube-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// Habitats for extendable crew tubes, such as sspx-extendable-tube-125-1
@PART[sspx-extendable-tube-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// Habitats for size adapters, such as sspx-adapter-1875-0625-1 and sspx-adapter-1875-125-2
@PART[sspx-adapter-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// Habitats for radial connectors, such as sspx-attach-1875-1
@PART[sspx-attach-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// Habitats for the six-way adapters, such as sspx-hub-1875-1
@PART[sspx-hub-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// Habitats for cupolas, such as sspx-cupola-greenhouse-125-1 and sspx-cupola-1875-1
@PART[sspx-cupola-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// Habitats for domes, including sspx-dome-greenhouse-5-1 and sspx-dome-habitation-5-1
@PART[sspx-dome-*]:HAS[!MODULE[Habitat],!MODULE[KerbalSeat]]:NEEDS[FeatureHabitat]:FOR[KerbalismDefault]
{
  MODULE
  {
	name = Habitat
  }
  MODULE
  {
	name = Sensor
	type = temperature
  }
  MODULE
  {
	name = Sensor
	type = radiation
  }
  MODULE
  {
	name = Sensor
	type = habitat_radiation
  }
}

// end
