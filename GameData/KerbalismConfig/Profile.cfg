KERBALISM_PROFILE
{
  SUPPLY
  {
    name = ElectricCharge
    evaCapacity = 33.0
    grantedOnRescue = 10000.0
    warnOnlyIfManned = false
    lowMessage = #KERBALISM_low_battery
    lowStopWarp = true
    emptyMessage = #KERBALISM_empty_battery
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_battery
  }

  SUPPLY
  {
    name = KsmAtmosphere
  }

  SUPPLY
  {
    name = KsmWasteAtmosphere
    levelThreshold = 0.001
    warningUIMode = OnFull
    fillMessage = Habitat CO2 levels are rising on $VESSEL
    fillSeverity = danger
  }

  SUPPLY
  {
    name = Food
    podCapacity = 1.35    // 5 days
    grantedOnRescue = 2.2  // 8 days
    lowMessage = #KERBALISM_low_food
    emptyMessage = #KERBALISM_empty_food
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_food
  }

  SUPPLY
  {
    name = Water
    podCapacity = 0.7     // 5 days
    grantedOnRescue = 1.1  // 8 days
    lowMessage = #KERBALISM_low_water
    emptyMessage = #KERBALISM_empty_water
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_water
  }

  SUPPLY
  {
    name = Oxygen
    podCapacity = 187      // 5 days
    evaCapacity = 12.5     // 2 hrs
    grantedOnRescue = 298   // 8 days
    lowStopWarp = true
    lowMessage = #KERBALISM_low_oxygen
    emptyMessage = #KERBALISM_empty_oxygen
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_oxygen
  }

  SUPPLY
  {
    name = CarbonDioxide
    warningMode = Disabled
    lowMessage = #KERBALISM_low_co2
    emptyMessage = #KERBALISM_empty_co2
    fillMessage = #KERBALISM_refill_co2
  }

  SUPPLY
  {
    name = Nitrogen
    warningMode = Disabled
    on_rescue = 100.0
    lowMessage = #KERBALISM_low_nitrogen
    emptyMessage = #KERBALISM_empty_nitrogen
    fillMessage = #KERBALISM_refill_nitrogen
  }

  SUPPLY
  {
    name = Hydrogen
    warningMode = Disabled
    lowMessage = #KERBALISM_low_hydrogen
    emptyMessage = #KERBALISM_empty_hydrogen
    fillMessage = #KERBALISM_refill_hydrogen
  }

  SUPPLY
  {
    name = Ammonia
    warningMode = Disabled
    lowMessage = #KERBALISM_low_ammonia
    emptyMessage = #KERBALISM_empty_ammonia
    fillMessage = #KERBALISM_refill_ammonia
  }

// ============================================================================
// RULES
// ============================================================================

  RULE
  {
    name = climatization
    title = #KERBALISM_RuleName_climatization
    input = ElectricCharge
    rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
    degeneration = 0.00000007 // about 2h at 100k temp diff in 20m^3
    //modifier = temperature,volume,per_capita
    modifier = (EnvTempDiff * Habitat.livingVolume) / Max(CrewCount, 1.0)
    warning_message = #KERBALISM_climatization_warning
    danger_message = #KERBALISM_climatization_danger
    fatal_message = #KERBALISM_climatization_fatal
    relax_message = #KERBALISM_climatization_relax
  }

  RULE
  {
    name = eating
    title = #KERBALISM_RuleName_eating
    input = Food
    output = Waste
    rate = 0.00001215 // Based on ISS figures of dehydrated food of 0.59Kg/meal 3 times/day = 1.77Kg/day.
                        // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.036875Kg/meal = 0.07375Kg/day
                        // Food to Waste mass difference is calculated internally
    individuality = 0.01
    degeneration = 0.00001543 // 15 days
    warning_message = #KERBALISM_food_warning
    danger_message = #KERBALISM_food_danger
    fatal_message = #KERBALISM_food_fatal
    relax_message = #KERBALISM_food_relax
  }

  RULE
  {
    name = drinking
    title = #KERBALISM_RuleName_drinking
    input = Water
    output = WasteWater
    rate = 0.00000622 // Based on ISS figures of 1.62Kg/day drinking and 0.8Kg/day to rehydrate food 3 times/day = 2.42 Kg/day.
                      // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.10125Kg/day drinking
                      // and 0.033125Kg/day to rehydrate food 2 times/day = 0.134375Kg/day.
                      // Water to WasteWater mass difference is calculated internally.
    degeneration = 0.00000309 // 3 days
    individuality = 0.01
    warning_message = #KERBALISM_water_warning
    danger_message = #KERBALISM_water_danger
    fatal_message = #KERBALISM_water_fatal
    relax_message = #KERBALISM_water_relax
  }

  RULE
  {
    name = breathing
    title = #KERBALISM_RuleName_breathing
    input = Oxygen
    output = KsmWasteAtmosphere
    rate = 0.00172379825 // Based on ISS figures of 0.84Kg/day. Kerbals use 1/16 of an astronauts use giving figures of 0.0525Kg/day.
                         // Oxygen to WasteAtmosphere mass difference is calculated internally
    degeneration = 0.0055555 // 3 minutes
    individuality = 0.01
    warning_message = #KERBALISM_oxygen_warning
    danger_message = #KERBALISM_oxygen_danger
    fatal_message = #KERBALISM_oxygen_fatal
    relax_message = #KERBALISM_oxygen_relax
  }

  RULE
  {
    name = co2Poisoning
    title = #KERBALISM_RuleName_co2poisoning
    degeneration = 0.0005555 // 30 minutes
    // modifier = poisoning
    modifier = if(Habitat.poisoningLevel > 0.02, 1.0, 0.0)
    warning_threshold = 0.23
    warning_message = #KERBALISM_co2_warning
    danger_message = #KERBALISM_co2_danger
    fatal_message = #KERBALISM_co2_fatal
    relax_message = #KERBALISM_co2_relax
  }

  RULE
  {
    name = stress
    title = #KERBALISM_RuleName_stress
    degeneration = 0.00000925926 // 5 kerbin days
    regeneration = 0.00000010919 // 1 kerbin year
    variance = 0.33 // add per-kerbal variance
    individuality = 0.1
    modifier = Pow((2.0 - Pow(Habitat.livingSpaceFactor, 0.25) - Pow(Habitat.comfortFactor, 0.5)) / 2.0, 4.0)
    breakdown = true // trigger breakdown event instead of death
    warning_message = #KERBALISM_stress_warning
    danger_message = #KERBALISM_stress_danger
    relax_message = #KERBALISM_stress_relax

    // old formula (no stress regeneration)
    // degeneration = 0.00000000463 // 10000 kerbin days
    // modifier = ((1.0 / Max(0.1, Habitat.livingSpaceFactor)) / Max(0.1, Habitat.comfortFactor)) * Max(1.0, (1.0 - Habitat.pressureFactor) * 20.0)
  }

  RULE
  {
    name = radiation
    title = #KERBALISM_RuleName_radiation
    degeneration = 1.0 // just use the modifier
    variance = 0.1 // add per-kerbal variance
    individuality = 0.15
    lifetime = true // this is a life time value
    //modifier = radiation,shielding
    modifier = 1.0 * EnvHabitatRadiation * (1.0 - Habitat.shieldingModifier)
    warning_threshold = 25.0
    danger_threshold = 37.5
    fatal_threshold = 50.0
    warning_message = #KERBALISM_radiation_warning
    danger_message = #KERBALISM_radiation_danger
    fatal_message = #KERBALISM_radiation_fatal
    relax_message = #KERBALISM_radiation_relax
  }

// ============================================================================
// Processes - non controllable
// ============================================================================

  PROCESS
  {
    // From ISS: see https://www.nasa.gov/pdf/179225main_ISS_Poster_Back.pdf and https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20110012997.pdf
    // 935 m³ volume, ~1105 m² surface (estimated), 0.227 Kg/day (structural)
    // Surface estimation: see the "Atmo Leak Estimation" spreadsheet in misc.
    // 1 Kerbin day is 1/4 of a human day so 0.227/4 = 0.05675 Kg/day
    // 0.05675 Kg/day over 1105 m² = 0.0513352488 (g/m²)/day.
    // Using the density of N2 from CRP we get 1.251 g/KSPunit = 0.0410353707 (unit/m²)/day
    // That divided over 21600 secs = 0.000001899785682 (unit/m²)/sec
    name = atmoLeaks
    title = #KERBALISM_Process_AtmoLeaks_title
    desc = #KERBALISM_Process_AtmoLeaks_desc
    modifier = Habitat.pressurizedSurface * (1.0 - Min(EnvStaticPressure, 1.0))
    canToggle = false
    INPUT
    {
      name = KsmAtmosphere
      rate = 0.000001899785682  // leakage of Atmosphere (N2) per second for a surface area of 1 m²
    }
  }

  // IntakeAir is created by the stock air intake module (duh), the parts usually have a small capacity for it (0.5 > 5.0 units)
  // so we use it as a (not very reliable, but whatever) modifier to know when those parts are present, and scale it by the static pressure
  // TODO : add something in the description of all parts that have the air intake module
  PROCESS
  {
    name = airScrubbingPump
    title = #KERBALISM_Process_AirScrubbingPump_title
    desc = #KERBALISM_Process_AirScrubbingPump_desc
    modifier = 1.0 * if(EnvInOxygenAtmosphere, 0.0, 1.0) * EnvStaticPressure * ResHandler.GetResource("IntakeAir").Level
    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 1.0 // TODO : adjust this
    }
  }

  PROCESS
  {
    name = airPressurePump
    title = #KERBALISM_Process_AirPump_title
    desc = #KERBALISM_Process_AirPump_desc
    modifier = 1.0 * if(EnvInOxygenAtmosphere, 0.0, 1.0) * EnvStaticPressure * ResHandler.GetResource("IntakeAir").Level
    OUTPUT
    {
      name = KsmAtmosphere
      rate = 1.0 // TODO : adjust this
    }
    OUTPUT
    {
      name = Oxygen
      rate = 1.0 // TODO : adjust this
    }
  }

// ============================================================================
// Processes used in ProcessControllers
// ============================================================================

  // convention: 1 capacity = enough to scrub output of 1 crew member for 1 day
  PROCESS
  {
    name = nonRegenerativeScrubber
    title = #KERBALISM_NonRegenScrubber_title
    desc = #KERBALISM_NonRegenScrubber_desc
    modifier = ResHandler.GetResource("nonRegenerativeScrubberRes").Amount
    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 0.0024915995    // efficiency starts at 2 (2 x a pods scrubber), reaches 1 in 6h, then drops below
    }
    INPUT
    {
      name = nonRegenerativeScrubberProcess
      rate = 0.000023148   // consume 0.5 capacity in 6h, simulates the scrubber wearing out over time.
    }
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member
  // 1 kerbal output 0.00124579975 WasteAtmosphere/s, rounded to 0.0014 to account for individuality and floating point rounding
  PROCESS
  {
    name = scrubber
    title = #KERBALISM_Scrubber_title
    desc = #KERBALISM_Scrubber_desc
    modifier = ResHandler.GetResource("scrubberRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.025
    }
    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 0.0014
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.0014
      dumpByDefault = true
    }
  }

  // convention: 1 capacity = enough to compensate for leaks in 70 m² surface area (a cube of 40 m³ volume, edge length of 3.42 m) per crew member
  // = 0.00025624796502 N2 to replace the Atmosphere leaked via the atmo leaks process for the above approx needed surface area per crew member
  PROCESS
  {
    name = pressureControl
    title = #KERBALISM_PressureControl_title
    desc = #KERBALISM_PressureControl_desc
    modifier = ResHandler.GetResource("pressureControlRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.00858
    }
    INPUT
    {
      name = Nitrogen
      rate = 0.35  // Much higher than amount needed for leak control to allow speedier pressurization of low pressure habs and inflatables
    }
    OUTPUT
    {
      name = KsmAtmosphere
      rate = 0.35
      canDump = false
    }
  }

  // convention: 1 capacity = enough to recycle output of 1 crew member
  PROCESS
  {
    name = waterRecycler
    title = #KERBALISM_WaterRecycler_title
    desc = #KERBALISM_WaterRecycler_desc
    modifier = ResHandler.GetResource("waterRecyclerRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.0446
    }
    INPUT
    {
      name = WasteWater
      rate = 0.00000619
    }
    OUTPUT
    {
      name = Water
      rate = 0.000005262975 // ISS currently achieves 75% Water recovery from urine, although its design target was 85% (quality of urine is issue), we use the design target to be gentle on our users
    }
    OUTPUT
    {
      name = Ammonia
      rate = 0.0000361969 // Based on https://en.wikipedia.org/wiki/Urine assume we recover 90% of 0.5% mass percentage of Ammonia, keep in mind Ammonia is far less dense than Water
      dumpByDefault = true
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.0000142678 // Based on https://en.wikipedia.org/wiki/Urine assume we recover 90% of 0.5% mass percentage of CarbonDioxide, keep in mind CO2 is far less dense than Water
      dumpByDefault = true
    }
  }

  // convention: 1 capacity = enough to process output of 1 crew member
  PROCESS
  {
    name = wasteProcessor
    title = #KERBALISM_WasteProcessor_title
    desc = #KERBALISM_WasteProcessor_desc
    modifier = ResHandler.GetResource("wasteProcessorRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.065556
    }
    INPUT
    {
      name = Waste
      rate = 0.0000045525
    }
    // According to https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4500995/ feces contains approximately 0.7% nitrogen.
    // Feces is considered to the dominant source of Waste
    // Waste is 975.3 times more dense than Ammonia
    OUTPUT
    {
      name = Ammonia
      rate = 0.000031083125
    }
  }

  // convention: 1 capacity = enough to compress output of 1 crew member
  PROCESS
  {
    name = wasteCompressor
    title = #KERBALISM_WasteCompressor_title
    desc = #KERBALISM_WasteCompressor_desc
    modifier = ResHandler.GetResource("wasteCompressorRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 1.2
    }
    INPUT
    {
      name = Waste
      rate = 0.0000045525
    }
    OUTPUT
    {
      name = Shielding
      rate = 0.00000001602982
    }
  }

  PROCESS
  {
    name = electricGenerator
    title = #KERBALISM_ElectricGenerator_title
    desc = #KERBALISM_ElectricGenerator_desc
    modifier = ResHandler.GetResource("electricGeneratorRes").Amount
    OUTPUT
    {
      name = ElectricCharge
      rate = 1.0
    }
    canToggle = false
  }

  PROCESS
  {
    name = radioisotopeGenerator
    title = #KERBALISM_RTG_title
    desc = #KERBALISM_RTG_desc
    modifier = ResHandler.GetResource("radioisotopeGeneratorRes").Amount
    INPUT
    {
      name = _RTG
      rate = 0.000000001888 // 28.8 kerbin-year half-life
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 1.0
    }
    canToggle = false
  }

  PROCESS
  {
    name = fuelCell
    title = #KERBALISM_H2O2FuelCell_title
    desc = #KERBALISM_H2O2FuelCell_desc
    modifier = ResHandler.GetResource("fuelCellRes").Amount
    INPUT
    {
      name = Hydrogen
      rate = 1.0011122892
    }
    INPUT
    {
      name = Oxygen
      rate = 0.5065967413
    }
    OUTPUT
    {
      name = Water
      rate = 0.0008043014
      dumpByDefault = true
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 2.4026694940  // calculated from H2 @3.75ml/s gives 9W = 2400W/Liter. Referenced from page 14 of https://peer.asee.org/performance-of-a-pem-fuel-cell-system.pdf
    }
  }

  PROCESS
  {
    name = monopropFuelCell
    title = #KERBALISM_MonopropO2FuelCell_title
    desc = #KERBALISM_MonopropO2FuelCell_desc
    modifier = ResHandler.GetResource("monopropFuelCellRes").Amount
    INPUT
    {
      name = Oxygen
      rate = 0.510619148925
    }
    INPUT
    {
      name = MonoPropellant
      rate = 0.000901270123875 // (Hydrazine@0.000718143525)
    }
    OUTPUT
    {
      name = Nitrogen
      rate = 0.5038381295
      dumpByDefault = true
    }
    OUTPUT
    {
      name = Water
      rate = 0.0008106876
      dumpByDefault = true
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 0.1
    }
  }

  PROCESS
  {
    name = waterElectrolysis
    title = #KERBALISM_WaterElectrolysis_title
    desc = #KERBALISM_WaterElectrolysis_desc
    modifier = ResHandler.GetResource("waterElectrolysisRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 2.4026694940
    }
    INPUT
    {
      name = Water
      rate = 0.0008043014
    }
    OUTPUT
    {
      name = Hydrogen
      rate = 1.0011122892
    }
    OUTPUT
    {
      name = Oxygen
      rate = 0.5065967413
    }
  }

  PROCESS
  {
    name = wasteIncinerator
    title = #KERBALISM_WasteIncinerator_title
    desc = #KERBALISM_WasteIncinerator_desc
    modifier = ResHandler.GetResource("wasteIncineratorRes").Amount
    INPUT
    {
      name = Waste
      rate = 0.0001082667 // H18C82
    }
    INPUT
    {
      name = Oxygen
      rate = 0.1589194249
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.1497439605
    }
    OUTPUT
    {
      name = Water
      rate = 0.0000131259
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 0.005
    }
  }

  PROCESS
  {
    name = sabatierProcess   // LiquidFuel output balanced to match Anthraquinone Oxidizer output
    title = #KERBALISM_SabatierProcess_title
    desc = #KERBALISM_SabatierProcess_desc
    modifier = ResHandler.GetResource("sabatierProcessRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.008082126 // calculated using 3.256 J/(g K) (sustained heating to 575K)
    }
    INPUT
    {
      name = CarbonDioxide
      rate = 3.490273221
    }
    INPUT
    {
      name = Hydrogen
      rate = 13.87826691
    }
    OUTPUT
    {
      name = Water
      rate = 0.005574954
    }
    OUTPUT
    {
      name = LiquidFuel
      rate = 0.000496445    // (Methane@3.46196019) Note that LiquidFuel has a density of 5Kg/Unit
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = haberProcess
    title = #KERBALISM_HaberProcess_title
    desc = #KERBALISM_HaberProcess_desc
    modifier = ResHandler.GetResource("haberProcessRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.00594773  // calculated using 2.9367 J/(g K) (sustained heating to 700K)
    }
    INPUT
    {
      name = Nitrogen
      rate = 1.3315033550
    }
    INPUT
    {
      name = Hydrogen
      rate = 4.0
    }
    OUTPUT
    {
      name = Ammonia
      rate = 2.6336940144
    }
  }

  PROCESS
  {
    name = anthraquinoneProcess   // Oxidizer output balanced to match Sabatier LiquidFuel output
    title = #KERBALISM_AnthraquinoneProcess_title
    desc = #KERBALISM_AnthraquinoneProcess_desc
    modifier = ResHandler.GetResource("anthraquinoneProcessRes").Amount
    INPUT
    {
      name = Hydrogen
      rate = 2.0
    }
    INPUT
    {
      name = Oxygen
      rate = 2.0241355411
    }
    OUTPUT
    {
      name = Oxidizer
      rate = 0.0006067662   // (HydrogenPeroxide@0.0020922973) Note that Oxidizer has a density of 5Kg/Unit
    }
  }

  PROCESS
  {
    name = hydrazineProduction   // Peroxide process
    title = #KERBALISM_HydrazineProduction_title
    desc = #KERBALISM_HydrazineProduction_desc
    modifier = ResHandler.GetResource("hydrazineProductionRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.023871584  // calculated using 6.99 J/(g K) (sustained heating to 460K)
    }
    INPUT
    {
      name = Ammonia
      rate = 4.7203389609
    }
    INPUT
    {
      name = Oxidizer
      rate = 0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
    }
    OUTPUT
    {
      name = Water
      rate = 0.0057597534
    }
    OUTPUT
    {
      name = Oxygen
      rate = 1.2092781475
    }
    OUTPUT
    {
      name = MonoPropellant
      rate = 0.0008537763   // (Hydrazine@0.0034014990) Note that MonoPropellant has a density of 4Kg/Unit
    }
  }

  PROCESS
  {
    name = hydrazineProductionN2   // NitroPeroxide process
    title = #KERBALISM_HydrazineProductionN2_title
    desc = #KERBALISM_HydrazineProductionN2_desc
    modifier = ResHandler.GetResource("hydrazineProductionRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.059678961  // calculated using 6.99 J/(g K) (sustained heating to 460K)
    }
    INPUT
    {
      name = Ammonia
      rate = 4.7203389609
    }
    INPUT
    {
      name = Oxidizer
      rate = 0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
    }
    INPUT
    {
      name = Nitrogen
      rate = 3.5796568216
    }
    OUTPUT
    {
      name = Oxygen
      rate = 4.8371125902
    }
    OUTPUT
    {
      name = MonoPropellant
      rate = 0.0021344406   // (Hydrazine@0.0085037476) Note that MonoPropellant has a density of 4Kg/Unit
    }
  }

  PROCESS
  {
    name = solidOxideElectrolysis
    title = #KERBALISM_SolidOxideElectrolysis_title
    desc = #KERBALISM_SolidOxideElectrolysis_desc
    modifier = ResHandler.GetResource("solidOxideElectrolysisRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.010835259   // calculated using 10.1749 J/(g K)  (sustained heating to 1125K)
    }
    INPUT
    {
      name = CarbonDioxide
      rate = 2.0
    }
    OUTPUT
    {
      name = Oxygen
      rate = 2.0121270980
    }
    OUTPUT
    {
      name = KsmShielding
      rate = 0.0000046953      // makes Shielding out of waste Carbon@0.0005070956
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = moltenRegolithElectrolysis
    title = #KERBALISM_MoltenRegolithElectrolysis_title
    desc = #KERBALISM_MoltenRegolithElectrolysis_desc
    modifier = ResHandler.GetResource("moltenRegolithElectrolysisRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 2.0 // 2 kW MRE reactor at 2300 K with heat corrosion resistant crucible
    }
    INPUT
    {
      name = Ore
      rate = 0.00006342
    }
    OUTPUT
    {
      name = Oxygen
      rate = 0.088843           // 42% of regolith is O2
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.00444215  // approx 2% of regolith is CO2, released in the pre-heating stage @950K
      dumpByDefault = true
    }
    OUTPUT
    {
      name = KsmShielding
      rate = 0.000000112     // makes Shielding out of waste Slag
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = selectiveCatalyticOxidation
    title = #KERBALISM_SelectiveCatalyticOxidation_title
    desc = #KERBALISM_SelectiveCatalyticOxidation_desc
    modifier = ResHandler.GetResource("selectiveCatalyticOxidationRes").Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.007166717  // calculated using 2.9367 J/(g K) (sustained heating to 700K)
    }
    INPUT
    {
      name = Ammonia
      rate = 2.0
    }
    INPUT
    {
      name = Oxygen
      rate = 1.5371075987
    }
    OUTPUT
    {
      name = Nitrogen
      rate = 1.0111298789
    }
    OUTPUT
    {
      name = Water
      rate = 0.0024403982
    }
  }
}
