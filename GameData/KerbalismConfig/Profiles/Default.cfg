// ============================================================================
// The default profile
// ============================================================================

Profile
{
  name = default

  Supply
  {
    resource = ElectricCharge
    on_eva = 33.0
    on_rescue = 10000.0
    low_message = #KERBALISM_low_battery
    empty_message = #KERBALISM_empty_battery
    refill_message = #KERBALISM_refill_battery
  }

  Supply
  {
    resource = Food
    on_pod = 1.35    // 5 days
    on_rescue = 2.2  // 8 days
    low_message = #KERBALISM_low_food
    empty_message = #KERBALISM_empty_food
    refill_message = #KERBALISM_refill_food
  }

  Supply
  {
    resource = Water
    on_pod = 0.7     // 5 days
    on_rescue = 1.1  // 8 days
    low_message = #KERBALISM_low_water
    empty_message = #KERBALISM_empty_water
    refill_message = #KERBALISM_refill_water
  }

  Supply
  {
    resource = Oxygen
    on_pod = 187      // 5 days
    on_eva = 12.5     // 2 hrs
    on_rescue = 298   // 8 days
    low_message = #KERBALISM_low_oxygen
    empty_message = #KERBALISM_empty_oxygen
    refill_message = #KERBALISM_refill_oxygen
  }

  Supply
  {
    resource = CarbonDioxide
    low_message = #KERBALISM_low_co2
    empty_message = #KERBALISM_empty_co2
    refill_message = #KERBALISM_refill_co2
  }

  Supply
  {
    resource = Nitrogen
    on_rescue = 100.0
    low_message = #KERBALISM_low_nitrogen
    empty_message = #KERBALISM_empty_nitrogen
    refill_message = #KERBALISM_refill_nitrogen
  }

  Supply
  {
    resource = Hydrogen
    low_message = #KERBALISM_low_hydrogen
    empty_message = #KERBALISM_empty_hydrogen
    refill_message = #KERBALISM_refill_hydrogen
  }

  Supply
  {
    resource = Ammonia
    low_message = #KERBALISM_low_ammonia
    empty_message = #KERBALISM_empty_ammonia
    refill_message = #KERBALISM_refill_ammonia
  }

  Rule
  {
    name = climatization
    title = #KERBALISM_RuleName_climatization
    input = ElectricCharge
    rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
    degeneration = 0.00000007 // about 2h at 100k temp diff in 20m^3
    modifier = temperature,volume,per_capita
    warning_message = #KERBALISM_climatization_warning
    danger_message = #KERBALISM_climatization_danger
    fatal_message = #KERBALISM_climatization_fatal
    relax_message = #KERBALISM_climatization_relax
  }

  Rule
  {
    name = eating
    title = #KERBALISM_RuleName_eating
    input = Food
    output = Waste
    rate = 0.1312141885 // Based on ISS figures of dehydrated food of 0.59Kg/meal 3 times/day = 1.77Kg/day.
                        // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.036875Kg/meal = 0.07375Kg/day
                        // Food to Waste mass difference is calculated internally
    interval = 10800.0  // 2 meals per-day
    individuality = 0.01
    degeneration = 0.03333 // 30 meals, 15 days
    warning_message = #KERBALISM_food_warning
    danger_message = #KERBALISM_food_danger
    fatal_message = #KERBALISM_food_fatal
    relax_message = #KERBALISM_food_relax
  }

  Rule
  {
    name = drinking
    title = #KERBALISM_RuleName_drinking
    input = Water
    output = WasteWater
    rate = 0.03359375 // Based on ISS figures of 1.62Kg/day drinking and 0.8Kg/day to rehydrate food 3 times/day = 2.42 Kg/day.
                      // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.10125Kg/day drinking
                      // and 0.033125Kg/day to rehydrate food 2 times/day = 0.134375Kg/day.
                      // Water to WasteWater mass difference is calculated internally.
    interval = 5400.0 // 4 drinks per-day
    degeneration = 0.08333 // 12 drinks, 3 days
    individuality = 0.01
    warning_message = #KERBALISM_water_warning
    danger_message = #KERBALISM_water_danger
    fatal_message = #KERBALISM_water_fatal
    relax_message = #KERBALISM_water_relax
  }

  Rule
  {
    name = breathing
    title = #KERBALISM_RuleName_breathing
    input = Oxygen
    output = WasteAtmosphere
    rate = 0.00172379825 // Based on ISS figures of 0.84Kg/day. Kerbals use 1/16 of an astronauts use giving figures of 0.0525Kg/day.
                         // Oxygen to WasteAtmosphere mass difference is calculated internally
    degeneration = 0.0055555 // 3 minutes
    modifier = non_breathable
    individuality = 0.01
    warning_message = #KERBALISM_oxygen_warning
    danger_message = #KERBALISM_oxygen_danger
    fatal_message = #KERBALISM_oxygen_fatal
    relax_message = #KERBALISM_oxygen_relax
  }

  Rule
  {
    name = co2 poisoning
    title = #KERBALISM_RuleName_co2poisoning
    degeneration = 0.0005555 // 30 minutes
    modifier = poisoning
    warning_threshold = 0.23
    warning_message = #KERBALISM_co2_warning
    danger_message = #KERBALISM_co2_danger
    fatal_message = #KERBALISM_co2_fatal
    relax_message = #KERBALISM_co2_relax
  }

  Rule
  {
    name = stress
    title = #KERBALISM_RuleName_stress
    degeneration = 0.00000000463 // 10000 days
    variance = 0.33 // add per-kerbal variance
    individuality = 0.1
    modifier = living_space,comfort,pressure
    breakdown = true // trigger breakdown event instead of death
    warning_message = #KERBALISM_stress_warning
    danger_message = #KERBALISM_stress_danger
    relax_message = #KERBALISM_stress_relax
  }

  Rule
  {
    name = radiation
    title = #KERBALISM_RuleName_radiation
    degeneration = 1.0 // just use the modifier
    variance = 0.1 // add per-kerbal variance
    individuality = 0.15
    lifetime = true // this is a life time value
    modifier = radiation,shielding
    warning_threshold = 25.0
    danger_threshold = 37.5
    fatal_threshold = 50.0
    warning_message = #KERBALISM_radiation_warning
    danger_message = #KERBALISM_radiation_danger
    fatal_message = #KERBALISM_radiation_fatal
    relax_message = #KERBALISM_radiation_relax
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member for 1 day
  Process
  {
    name = non-regenerative scrubber
    title = #KERBALISM_Process_NonRegenScrubber
    modifier = _NonRegenScrubber
    input = WasteAtmosphere@0.0024915995    // efficiency starts at 2 (2 x a pods scrubber), reaches 1 in 6h, then drops below
    input = _NonRegenScrubber@0.000023148   // consume 0.5 capacity in 6h, simulates the scrubber wearing out over time.
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member
  Process
  {
    name = scrubber
    title = #KERBALISM_Process_Scrubber
    modifier = _Scrubber
    input = ElectricCharge@0.025
    input = WasteAtmosphere@0.00124579975
    output = CarbonDioxide@0.00124579975
    dump = true
  }

  // convention: 1 capacity = enough to compensate for leaks in 70 m² surface area (a cube of 40 m³ volume, edge length of 3.42 m) per crew member
  // = 0.00025624796502 N2 to replace the Atmosphere leaked via the atmo leaks process for the above approx needed surface area per crew member
  Process
  {
    name = pressure control
    title = #KERBALISM_Process_PressureControl
    modifier = _PressureControl,non_breathable
    input = ElectricCharge@0.00858
    input = Nitrogen@0.35  // Much higher than amount needed for leak control to allow speedier pressurization of low pressure habs and inflatables
    output = Atmosphere@0.35
  }

  // convention: When the vessel is in a breathable atmosphere, pressure control is automatically disabled and the air pump will pump air
  // into the vessel to maintain pressurization of any habitable areas, one example is inflating inflatable habitats without using any
  // N2 when a breathable atmosphere is present.
  Process
  {
    name = air pump
    title = #KERBALISM_Process_AirPump
    modifier = _AirPump,breathable
    input = ElectricCharge@0.00258
    output = Atmosphere@7.35
  }

  // convention: 1 capacity = enough to recycle output of 1 crew member
  Process
  {
    name = water recycler
    title = #KERBALISM_Process_WaterRecycler
    modifier = _WaterRecycler
    input = ElectricCharge@0.0446
    input = WasteWater@0.00000619
    output = Water@0.000005262975 // ISS currently achieves 75% Water recovery from urine, although its design target was 85% (quality of urine is issue), we use the design target to be gentle on our users
    output = Ammonia@0.0000361969 // Based on https://en.wikipedia.org/wiki/Urine assume we recover 90% of 0.5% mass percentage of Ammonia, keep in mind Ammonia is far less dense than Water
    output = CarbonDioxide@0.0000142678 // Based on https://en.wikipedia.org/wiki/Urine assume we recover 90% of 0.5% mass percentage of CarbonDioxide, keep in mind CO2 is far less dense than Water
    dump_valve = Water,Ammonia,CarbonDioxide,Water&Ammonia,Water&CarbonDioxide,Ammonia&CarbonDioxide
  }

  // convention: 1 capacity = enough to process output of 1 crew member
  Process
  {
    name = waste processor
    title = #KERBALISM_Process_WasteProcessor
    modifier = _WasteProcessor
    input = ElectricCharge@0.065556
    input = Waste@0.0000045525
    // According to https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4500995/ feces contains approximately 0.7% nitrogen.
    // Feces is considered to the dominant source of Waste
    // Waste is 975.3 times more dense than Ammonia
    output = Ammonia@0.000031083125
  }

  // convention: 1 capacity = enough to compress output of 1 crew member
  Process
  {
    name = waste compressor
    title = #KERBALISM_Process_WasteCompressor
    modifier = _WasteCompressor
    input = ElectricCharge@1.2
    input = Waste@0.0000045525
    output = Shielding@0.00000001602982
  }

  Process
  {
    name = atmo leaks
    title = #KERBALISM_Process_AtmoLeaks
    modifier = surface,non_breathable
    input = Atmosphere@0.000001899785682  // leakage of Atmosphere (N2) per second for a surface area of 1 m²
    // From ISS: see https://www.nasa.gov/pdf/179225main_ISS_Poster_Back.pdf and https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20110012997.pdf
    // 935 m³ volume, ~1105 m² surface (estimated), 0.227 Kg/day (structural)
    // Surface estimation: see the "Atmo Leak Estimation" spreadsheet in misc.
    // 1 Kerbin day is 1/4 of a human day so 0.227/4 = 0.05675 Kg/day
    // 0.05675 Kg/day over 1105 m² = 0.0513352488 (g/m²)/day.
    // Using the density of N2 from CRP we get 1.251 g/KSPunit = 0.0410353707 (unit/m²)/day
    // That divided over 21600 secs = 0.000001899785682 (unit/m²)/sec
  }

  Process
  {
    name = electric generator
    title = #KERBALISM_Process_ElectricGenerator
    modifier = _ECGen
    output = ElectricCharge@1.0
  }

  Process
  {
    name = radioisotope generator
    title = #KERBALISM_Process_RadioisotopeGenerator
    modifier = _RTG
    input = _RTG@0.000000001888 // 28.8 kerbin-year half-life
    output = ElectricCharge@1.0
  }

  Process
  {
    name = fuel cell
    title = #KERBALISM_Process_FuelCell
    modifier = _FuelCell
    input = Hydrogen@1.0011122892
    input = Oxygen@0.5065967413
    output = Water@0.0008043014
    output = ElectricCharge@2.4026694940  // calculated from H2 @3.75ml/s gives 9W = 2400W/Liter. Referenced from page 14 of https://peer.asee.org/performance-of-a-pem-fuel-cell-system.pdf
    dump_valve = Water
  }

  Process
  {
    name = monoprop fuel cell
    title = #KERBALISM_Process_MonopropFuelCell
    modifier = _MonopropFuelCell
    input = Oxygen@0.510619148925
    input = MonoPropellant@0.000901270123875 // (Hydrazine@0.000718143525)
    output = Nitrogen@0.5038381295
    output = Water@0.0008106876
    output = ElectricCharge@0.1
    dump_valve = Nitrogen,Water,Nitrogen&Water
  }

  Process
  {
    name = water electrolysis
    title = #KERBALISM_Process_WaterElectrolysis
    modifier = _WaterElectrolysis
    input = ElectricCharge@2.4026694940
    input = Water@0.0008043014
    output = Hydrogen@1.0011122892
    output = Oxygen@0.5065967413
    dump_valve = Hydrogen,Oxygen
  }

  Process
  {
    name = waste incinerator
    title = #KERBALISM_Process_WasteIncinerator
    modifier = _WasteIncinerator
    input = Waste@0.0001082667 // H18C82
    input = Oxygen@0.1589194249
    output = CarbonDioxide@0.1497439605
    output = Water@0.0000131259
    output = ElectricCharge@0.005
    dump_valve = Water,ElectricCharge,Water&ElectricCharge
  }

  Process
  {
    name = sabatier process   // LiquidFuel output balanced to match Anthraquinone Oxidizer output
    title = #KERBALISM_Process_SabatierProcess
    modifier = _Sabatier
    input = ElectricCharge@0.008082126 // calculated using 3.256 J/(g K) (sustained heating to 575K)
    input = CarbonDioxide@3.490273221
    input = Hydrogen@13.87826691
    output = Water@0.005574954
    output = LiquidFuel@0.000496445    // (Methane@3.46196019) Note that LiquidFuel has a density of 5Kg/Unit
    dump_valve = Water,LiquidFuel
  }

  Process
  {
    name = haber process
    title = #KERBALISM_Process_HaberProcess
    modifier = _Haber
    input = ElectricCharge@0.00594773  // calculated using 2.9367 J/(g K) (sustained heating to 700K)
    input = Nitrogen@1.3315033550
    input = Hydrogen@4.0
    output = Ammonia@2.6336940144
  }

  Process
  {
    name = anthraquinone process   // Oxidizer output balanced to match Sabatier LiquidFuel output
    title = #KERBALISM_Process_AnthraquinoneProcess
    modifier = _Anthraquinone
    input = Hydrogen@2.0
    input = Oxygen@2.0241355411
    output = Oxidizer@0.0006067662   // (HydrogenPeroxide@0.0020922973) Note that Oxidizer has a density of 5Kg/Unit
  }

  Process
  {
    name = hydrazine production   // Peroxide process
    title = #KERBALISM_Process_HydrazineProduction
    modifier = _HydrazineProduction
    input = ElectricCharge@0.023871584  // calculated using 6.99 J/(g K) (sustained heating to 460K)
    input = Ammonia@4.7203389609
    input = Oxidizer@0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
    output = Water@0.0057597534
    output = Oxygen@1.2092781475
    output = MonoPropellant@0.0008537763   // (Hydrazine@0.0034014990) Note that MonoPropellant has a density of 4Kg/Unit
    dump_valve = Water,Oxygen,MonoPropellant,Water&Oxygen,Water&MonoPropellant,Oxygen&MonoPropellant
  }

  Process
  {
    name = hydrazine production N2 injection   // NitroPeroxide process
    title = #KERBALISM_Process_HydrazineProductionN2
    modifier = _NitroHydrazine
    input = ElectricCharge@0.059678961  // calculated using 6.99 J/(g K) (sustained heating to 460K)
    input = Ammonia@4.7203389609
    input = Oxidizer@0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
    input = Nitrogen@3.5796568216
    output = Oxygen@4.8371125902
    output = MonoPropellant@0.0021344406   // (Hydrazine@0.0085037476) Note that MonoPropellant has a density of 4Kg/Unit
    dump_valve = Oxygen,MonoPropellant
  }

  Process
  {
    name = solid oxide electrolysis
    title = #KERBALISM_Process_SolidOxideElectrolysis
    modifier = _SOE
    input = ElectricCharge@0.010835259   // calculated using 10.1749 J/(g K)  (sustained heating to 1125K)
    input = CarbonDioxide@2.0
    output = Oxygen@2.0121270980
    output = Shielding@0.0000046953      // makes Shielding out of waste Carbon@0.0005070956
    dump_valve = Shielding,Oxygen
  }

  Process
  {
    name = molten regolith electrolysis
    title = #KERBALISM_Process_MoltenRegolithElectrolysis
    modifier = _MRE
    input = ElectricCharge@2.0 // 2 kW MRE reactor at 2300 K with heat corrosion resistant crucible
    input = Ore@0.00006342
    output = Oxygen@0.088843           // 42% of regolith is O2
    output = CarbonDioxide@0.00444215  // approx 2% of regolith is CO2, released in the pre-heating stage @950K
    output = Shielding@0.000000112     // makes Shielding out of waste Slag
    dump_valve = Shielding&CarbonDioxide,Shielding,Shielding&Oxygen,CarbonDioxide,Oxygen,CarbonDioxide&Oxygen
  }

  Process
  {
    name = selective catalytic oxidation
    title = #KERBALISM_Process_SelectiveCatalyticOxidation
    modifier = _SCO
    input = ElectricCharge@0.007166717  // calculated using 2.9367 J/(g K) (sustained heating to 700K)
    input = Ammonia@2.0
    input = Oxygen@1.5371075987
    output = Nitrogen@1.0111298789
    output = Water@0.0024403982
    dump_valve = Water,Nitrogen
  }

  Process
  {
    name = radiation detox unit
    title = #KERBALISM_Process_RadiationDetoxUnit
    modifier = _SickbayRDU
    input = ElectricCharge@3.5
    input = Oxygen@0.002
    output = CarbonDioxide@0.001987945992
    cures = radiation@0.000005555554 // 0.02 rad/h
    dump = true
  }

  Process
  {
    name = tranquilizing vortex
    title = #KERBALISM_Process_TranquilizingVortex
    modifier = _SickbayTV
    input = ElectricCharge@0.057 // 32" OLED TV, source : https://www.rtings.com/tv/learn/led-oled-power-consumption-and-electricity-cost
    cures = stress@0.00000000463
  }

  Process
  {
    name = zero gravity shower  // showers are complex
    title = #KERBALISM_Process_ZeroGravityShower
    modifier = _SickbayShower
    input = ElectricCharge@0.014049975308642 //  sustained heating @4.184 J/gK to 313 K from 273 K storage temperature,
	input = Water@0.0000839507  // 5.44 L per shower, source : http://www.marsjournal.org/contents/2006/0005/files/rapp_mars_2006_0005.pdf
	output = WasteWater@0.0000839507  // water content fully recovered
	interval = 64800.0 // one shower every 18 hours / 3 days
    cures = stress@0.00000000463
  }

  Process
  {
    name = washer-dryer  // laundry is hard
    title = #KERBALISM_Process_WasherDryer
    modifier = _SickbayLaundry // one complete kerbal outfit is 0.77 kg source : https://ttu-ir.tdl.org/ttu-ir/bitstream/handle/2346/72928/ICES_2017_106.pdf?sequence=1&isAllowed=y
    input = ElectricCharge@0.0463715278 //  13.36 kWh / 3.06 kg clothing
	input = Water@0.0763900389  // 22 L per 3.06 kg clothes
	output = WasteWater@0.0763900389  // water content fully recovered
	interval = 259200.0 // kerbals change clothes every 72 hours / 12 days
    cures = stress@0.00000000463
  }

}


// ============================================================================
// Add Part Upgrade for upgradeable slots
// ============================================================================

PARTUPGRADE:NEEDS[ProfileDefault]
{
  name = Upgrade-Slots
  partIcon = kerbalism-chemicalplant
  techRequired = electronics
  entryCost = 20000
  title = #KERBALISM_Upgrade_Slots_title//Life support and Chemical plant slot upgrade
  manufacturer = Lambda Aerospace
  description = #KERBALISM_Upgrade_Slots_desc//Adds an additional configurable slot to Manned pods, ECLSS module and Chemical plants.
}


// ============================================================================
// Add configurable Life Support System to all manned parts
// ============================================================================

@PART[*]:HAS[#CrewCapacity[>0],!MODULE[KerbalSeat]]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = ProcessController
    resource = _Scrubber
    title = #KERBALISM_Scrubber_title//Scrubber
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = #KERBALISM_PressureControl_title//Pressure control
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _WaterRecycler
    title = #KERBALISM_WaterRecycler_title//Water recycler
    capacity = #$/CrewCapacity$
    running = true
    valve_i = 6 // workaround until we have a better way to deal with dump valves
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteProcessor
    title = #KERBALISM_WasteProcessor_title//Waste processor
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = #KERBALISM_MonopropO2FuelCell_title//Monoprop+O2 fuel cell
    capacity = #$/CrewCapacity$
    running = false
  }

  @MODULE[ProcessController],*
  {
    @capacity *= 1.67
  }

  MODULE
  {
    name = Configure
    title = Pod
    slots = 2

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = electronics
        slots = 0
      }
    }

    SETUP
    {
      name = Scrubber
      desc = #KERBALISM_Scrubber_desc//A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Scrubber
      }
    }

    SETUP
    {
      name = Pressure Control
      desc = #KERBALISM_PressureControl_desc//Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
      tech = engineering101
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _PressureControl
      }

      RESOURCE
      {
        // approx 5 days of leaks and volume of a crew member
        // crew going eva will need the volume their bodies displaced within the vessel replaced with N2 to correct pressure drop,
        // vise versa when entering from eva the pressure will increase due to the volume of the Kerbal displacing
        // the internal vessel atmosphere, excess is vented overboard.
	    // The pressure controller can be disabled to save N2 that will be used replacing the Kerbals volume,
        name = Nitrogen
        amount = #$/CrewCapacity$
        maxAmount = #$/CrewCapacity$
        @amount *= 331.3  // 1.3 for leaks, 330 Kerbal volume
        @maxAmount *= 331.3
      }
    }

    SETUP
    {
      name = Water Recycler
      desc = #KERBALISM_WaterRecycler_desc//Filter impurities out of <b>WasteWater</b>.
      tech = spaceExploration
      mass = 0.05
      cost = 500


      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterRecycler
      }

      RESOURCE
      {
        name = WasteWater
        amount = 0
        maxAmount = #$/CrewCapacity$
        @maxAmount *= 5
      }
    }

    SETUP
    {
      name = Waste Processor
      desc = #KERBALISM_WasteProcessor_desc//Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
      tech = advExploration
      mass = 0.05
      cost = 500

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteProcessor
      }

      RESOURCE
      {
        name = Waste
        amount = 0
        maxAmount = #$/CrewCapacity$
        @maxAmount *= 5
      }
    }

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = #KERBALISM_MonopropO2FuelCell_desc//An emergency fuel cell that burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = engineering101
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }

    SETUP
		{
			name = None
			desc = #KERBALISM_None_desc//Empty slot for mass and cost savings.
		}
  }
}

// boost Mk3 Shuttle cockpit and Science Lab Nitrogen storage
@PART[mk3Cockpit_Shuttle,Large_Crewed_Lab]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  @MODULE[Configure]:HAS[#title[Pod]]
  {
    @SETUP[Pressure?Control]
    {
    @RESOURCE[Nitrogen]
      {
        @amount *= 3
        @maxAmount *= 3
      }
    }
  }
}

// ============================================================================
// Add configurable Life Support System to Life Support Unit part
// ============================================================================

@PART[kerbalism-lifesupportmodule]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = ProcessController
    resource = _Scrubber
    title = #KERBALISM_Scrubber_title//Scrubber
    capacity = 3
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = #KERBALISM_PressureControl_title//Pressure control
    capacity = 3
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _AirPump
    title = #KERBALISM_AirPump_title//Air Pump
    capacity = 3
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _WaterRecycler
    title = #KERBALISM_WaterRecycler_title//Water recycler
    capacity = 3
    running = true
    valve_i = 6 // workaround until we have a better way to deal with dump valves
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteProcessor
    title = #KERBALISM_WasteProcessor_title//Waste processor
    capacity = 3
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = #KERBALISM_MonopropO2FuelCell_title//Monoprop+O2 fuel cell
    capacity = 3
    running = true
  }

  @MODULE[ProcessController],*
  {
    @capacity *= 1.67
  }

  MODULE
  {
    name = Configure
    title = Life Support
    slots = 2

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = electronics
        slots = 0
      }
    }

    SETUP
    {
      name = Scrubber
      desc = #KERBALISM_Scrubber_desc//A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Scrubber
      }
    }

    SETUP
    {
      name = Pressure Control
      desc = #KERBALISM_PressureControl_desc//Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
      tech = engineering101
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _PressureControl
      }
    }

    SETUP
    {
      name = Water Recycler
      desc = #KERBALISM_WaterRecycler_desc//Filter impurities out of <b>WasteWater</b>.
      tech = spaceExploration
      mass = 0.05
      cost = 500

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterRecycler
      }
    }

    SETUP
    {
      name = Waste Processor
      desc = #KERBALISM_WasteProcessor_desc//Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
      tech = advExploration
      mass = 0.05
      cost = 500

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteProcessor
      }
	}

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = #KERBALISM_MonopropO2FuelCell_desc2//Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = basicScience
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }

    SETUP
    {
      name = Air Pump
      desc = #KERBALISM_AirPump_desc//Regulates habitat pressure using outside air
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _AirPump
      }
    }
  }
}

// ============================================================================
// Add scrubber process to EVA kerbals
// ============================================================================

@PART[kerbalEVA*]:HAS[@MODULE[ModuleTripLogger]]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = ProcessController
    resource = _NonRegenScrubber
    title = #KERBALISM_NonRegenScrubber_title//Non-Regen Scrubber
    capacity = 1.0
    toggle = true
    running = true
  }
}


// ============================================================================
// Add configurable supplies to inline containers
// ============================================================================

// container volume is in Liters, calculated from the containers size and stored in the parts .cfg file
// amount and maxAmount are percentages of a full container at atmospheric pressure, e.g. 1 = 100%, 0.5 = 50%, 5 = 500% (or pressurized to 5 bar)

@PART[kerbalism-container-inline-*,kerbalism-container-hex-*,kerbalism-container-radial-box-*]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = Configure
    title = Supply Container
    slots = 1
    symmetric = true

    SETUP
    {
      name = Supplies  //  Ratio of Food and Water amounts are the same as a Kerbals intake
      desc = #KERBALISM_SupplyContainer_desc//Store a balanced supply of <b>Food</b> and <b>Water</b>.

      RESOURCE
      {
        name = Food
        amount = 0.7221584
        maxAmount = 0.7221584
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }

      RESOURCE
      {
        name = Water
        amount = 0.2778416
        maxAmount = 0.2778416
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Food

      RESOURCE
      {
        name = Food
        amount = 1
        maxAmount = 1
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Water

      RESOURCE
      {
        name = Water
        amount = 1
        maxAmount = 1
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Sewage  //  Ratio of Waste and WasteWater amounts are the same as a Kerbals output
      desc = #KERBALISM_SupplyContainer_desc2//Store solid and liquid organic <b>Waste</b>.

      RESOURCE
      {
        name = Waste
        amount = 0
        maxAmount = 0.4946378
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }

      RESOURCE
      {
        name = WasteWater
        amount = 0
        maxAmount = 0.5053622
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Waste

      RESOURCE
      {
        name = Waste
        amount = 0
        maxAmount = 1
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = WasteWater

      RESOURCE
      {
        name = WasteWater
        amount = 0
        maxAmount = 1
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }
  }
}


// ============================================================================
// Add configurable supplies to radial containers
// ============================================================================

// container volume is in Liters, calculated from the containers size and stored in the parts .cfg file
// amount and maxAmount are percentages of a full container at atmospheric pressure, e.g. 1 = 100%, 0.5 = 50%, 5 = 500% (or pressurized to 5 bar)

@PART[kerbalism-container-radial-pressurized-*,kerbalism-container-radial-big,kerbalism-container-radial-huge,kerbalism-container-radial-medium,kerbalism-container-radial-small]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = Configure
    title = Pressurized Tank
    slots = 1
    symmetric = true

    SETUP
    {
      name = Oxygen  // Stored at 200 bar (2940psi) when full
      desc = #KERBALISM_PressurizedTank_desc//Store pressurized <b>Oxygen</b> gas @ 200 bar.

      RESOURCE
      {
        name = Oxygen
        amount = 200
        maxAmount = 200
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Nitrogen  // Stored at 180 bar (2646psi) when full
      desc = #KERBALISM_PressurizedTank_desc2//Store pressurized <b>Nitrogen</b> gas @ 180 bar.

      RESOURCE
      {
        name = Nitrogen
        amount = 180
        maxAmount = 180
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Hydrogen  // Stored at 700 bar (10290psi) when full
      desc = #KERBALISM_PressurizedTank_desc3//Store pressurized <b>Hydrogen</b> gas @ 700 bar.

      RESOURCE
      {
        name = Hydrogen
        amount = 700
        maxAmount = 700
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Ammonia  // Stored at 35 bar (515psi) when full
      desc = #KERBALISM_PressurizedTank_desc4//Store pressurized <b>Ammonia</b> gas @ 35 bar.

      RESOURCE
      {
        name = Ammonia
        amount = 35
        maxAmount = 35
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = CarbonDioxide  // Stored at 60bar (882psi) when full
      desc = #KERBALISM_PressurizedTank_desc5//Store pressurized <b>Carbon dioxide</b> gas @ 60 bar.

      RESOURCE
      {
        name = CarbonDioxide
        amount = 60
        maxAmount = 60
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }

    SETUP
    {
      name = Xenon Gas  // Stored at 85 bar (1250psi) when full
						// see https://www.cobham.com/mission-systems/composite-pressure-solutions/space-systems/xenon-propellant-tank-datasheet/
      desc = #KERBALISM_PressurizedTank_desc6//Store pressurized <b>Xenon</b> gas @ 85 bar.
      tech = ionPropulsion

      RESOURCE
      {
        name = XenonGas
        amount = 85
        maxAmount = 85
        @amount *= #$/ContainerVolume$
        @maxAmount *= #$/ContainerVolume$
      }
    }
  }
}


// ============================================================================
// Setup greenhouse
// ============================================================================

@PART[kerbalism-greenhouse]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = Greenhouse
    // Please note the Greenhouse is its own process and does not work like the standard processes, for example the WasteAtmosphere and
	// CarbonDioxide INPUT_RESOURCE parameters work together and can internally interchange information depending on conditions, see below.

    crop_resource = Food                // name of resource produced by harvests
    // Based on design targets from Prototype Lunar Greenhouse (see https://www.ag.arizona.edu/lunargreenhouse/MidReviews.htm ):
    // Design targets are on slide 18 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
    // Prototype Lunar Greenhouse geometry can be found on slide 14 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
    // Much larger design for producing food for 6 people can be found here (values not used): https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
    // This Greenhouse is assumed to have 24 m^3 volume dedicated to food production (all greenhouses in mod support files are calculated relative to this one).
    // This Greenhouse is intended to support 0.5 Kerbal just like the Prototype Lunar Greenhouse.
    // Harvest time is 200 days, but in order to avoid micromanagement this greenhouse supports 0.5 Kerbal for 210 days.
    // Kerbals need 52.5 food per 200 days, converted to 210 days that is 55.125 food.
    crop_size = 27.5625                 // amount of resource produced by harvests
    crop_rate = 0.00000023148           // growth per second when all conditions apply, a fully grown crop equals value of 1.0
    ec_rate = 2.5                       // EC/s consumed by the lamp at max intensity

    light_tolerance = 400.0             // minimum lighting flux required for growth, in W/m^2
    pressure_tolerance = 0.1            // minimum pressure required for growth, in sea level atmospheres
    radiation_tolerance = 0.000008333   // maximum radiation allowed for growth in rad/s, considered after shielding is applied

    lamps = Cylinder001                 // object with emissive texture used to represent lamp intensity graphically
    shutters = door                     // animation to manipulate shutters
    plants =                            // animation to represent plant growth graphically

    INPUT_RESOURCE
    {
      name = Ammonia
      rate = 0.000095703125             // 15 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 6 hours * rate == 15 * crop_size
    }

    // Photosynthesis reaction: 2xH2O + CO2 -> O2 + CH2O + H2O
    // Note that CH2O is an intermediate carbohydrate, energy that goes into the food, in the actual food it can be any CxHyOz compound

    // In a hydroponic system plants grow in water containing nutrients, the system is assumed to be closed loop.
    // Therefore only the water loss during photosynthesis is modeled.

    // Water efficient foods require around 250-500 L water per kg of crop (see https://www.theguardian.com/news/datablog/2013/jan/10/how-much-water-food-production-waste)
    // In a regenerative system (see https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf slide 19) water is also produced.
    // In this example effective water consumption is 4.3 L per day. Every day approximately 2.4 kg of biomass is produced (not all of which can be eaten).
    // In this example the effective water consumption per kg of biomass is 1.8 L/kg.
    // TODO: Figure out what percentage of biomass actually becomes Food.
    // TODO: Figure how to recover the non-eatable biomass.
    // 1 unit of Food has a mass 0.28 kg (see community resource pack), therefore we will use 1.8 L/kg * 0.28 kg = 0.5 L of Water
    // 1 unit of Water matches 1 L, so we need 0.5 units of Water per unit of Food.
    INPUT_RESOURCE
    {
      name = Water
      rate = 0.0000031901         // 0.5 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 6 hours * rate == 0.5 * crop_size
    }

    INPUT_RESOURCE
    {
      name = WasteAtmosphere      // Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
      rate = 0.00124579975        // Matched to a Kerbals WasteAtmosphere output which is 75% of required CO2 for crops according to documents linked above
    }                             // WasteAtmosphere has the same density as CO2

    INPUT_RESOURCE
    {
      name = CarbonDioxide        // Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
                                  // present then it will be used in place of CO2 injection
      rate = 0.000415266575       // Remaining 25% of CO2 required.
    }

    // Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
    // CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
    // If there is not enough resources then the plants will suffer.

    OUTPUT_RESOURCE
    {
      name = Oxygen
      rate = 0.00172379825              // 100% of oxygen required by 1 crew member, based on Prototype Lunar Greenhouse design targets
    }                                   // (percentage is factor 2 larger than food)
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = #KERBALISM_PressureControl_title//Pressure control
    capacity = 0.2143
    running = true
  }

  RESOURCE
  {
    name = Ammonia
    amount = 272             // enough for 202 days including reclaimed ammonia from wastes, one crop cycle, two greenhouses combined
    maxAmount = 272
  }

  // CarbonDioxide is provided because humans don't provide enough CO2 for their required food production
  // Both https://www.space.com/9353-lunar-greenhouse-grow-food-future-moon-colonies.html and
  // https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
  // mention CO2 injection despite being closed loop systems.
  RESOURCE
  {
    name = CarbonDioxide
    amount = 4500            // enough for 202 days of CO2 injection (25% of total CO2 required), one crop cycle, two greenhouses combined
    maxAmount = 4500
  }

  // To support the pressure control
  RESOURCE
  {
    name = Nitrogen
    amount = 10000           // enough for 201 days , one crop cycle
    maxAmount = 10000
  }

  RESOURCE
  {
    name = Water
    amount = 11              // enough for 208 days including reclaimed water from wastes, one crop cycle, two greenhouses combined
    maxAmount = 11
  }
}

// ============================================================================
// Launch clamps
// ============================================================================

@PART[launchClamp1]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = ProcessController
    resource = _ECGen
    title = #KERBALISM_PowerSupply_title//Power supply
    capacity = 1.0
    running = true
    toggle = false
  }

  !MODULE[ModuleGenerator] {}
}

// ============================================================================
// RTG
// ============================================================================

@PART[rtg]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = ProcessController
    resource = _RTG
    title = #KERBALISM_RTG_title//RTG
    capacity = 0.75
    running = true
    toggle = false
  }

  !MODULE[ModuleGenerator] {}
  !MODULE[ModuleCoreHeat] {}
}


// ============================================================================
// Fuel cells
// ============================================================================

@PART[FuelCell]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  !MODULE[ModuleResourceConverter] {}
  !RESOURCE[ElectricCharge] {}

  MODULE
  {
    name = ProcessController
    resource = _FuelCell
    title = #KERBALISM_H2O2FuelCell_title//H2+O2 fuel cell
    capacity = 1
    valve_i = 1 // workaround until we have a better way to deal with dump valves
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = #KERBALISM_MonopropO2FuelCell_title//Monoprop+O2 fuel cell
    capacity = 5
  }

  MODULE
  {
    name = Configure
    title = Fuel Cell
    slots = 1

    SETUP
    {
      name = Hydrogen Oxygen Fuel Cell
      desc = #KERBALISM_H2O2FuelCell_desc//Burns <b>Hydrogen</b> gas and <b>Oxygen</b> gas, producing <b>Water</b> as a by-product.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _FuelCell
      }
    }

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = #KERBALISM_MonopropO2FuelCell_desc2//Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = basicScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = #KERBALISM_FuelCell_title//Fuel Cell
    redundancy = Power Generation
    repair = Engineer
    mtbf = 72576000
    extra_cost = 1.0
    extra_mass = 0.5
  }

  @TechRequired = basicScience
}

@PART[FuelCellArray]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  !MODULE[ModuleResourceConverter] {}
  !RESOURCE[ElectricCharge] {}

  MODULE
  {
    name = ProcessController
    resource = _FuelCell
    title = #KERBALISM_H2O2FuelCell_title//H2+O2 fuel cell
    capacity = 6
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = #KERBALISM_MonopropO2FuelCell_title//Monoprop+O2 fuel cell
    capacity = 30
  }

  MODULE
  {
    name = Configure
    title = Fuel Cell
    slots = 1

    SETUP
    {
      name = Hydrogen Oxygen Fuel Cell
      desc = #KERBALISM_H2O2FuelCell_desc//Burns <b>Hydrogen</b> gas and <b>Oxygen</b> gas, producing <b>Water</b> as a by-product.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _FuelCell
      }
    }

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = #KERBALISM_MonopropO2FuelCell_desc2//Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = basicScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = #KERBALISM_FuelCell_title//Fuel Cell
    redundancy = Power Generation
    repair = Engineer
    mtbf = 72576000
    extra_cost = 1.0
    extra_mass = 0.5
  }
}


// ============================================================================
// ISRU chemical plants
// ============================================================================

@PART[kerbalism-chemicalplant,MiniISRU,ISRU]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Lf+Ox]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[LiquidFuel]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Oxidizer]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Monoprop]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[MonoPropellant]] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}

  MODULE
  {
    name = ProcessController
    resource = _WaterElectrolysis
    title = #KERBALISM_WaterElectrolysis_title//Water electrolysis
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _Sabatier
    title = #KERBALISM_SabatierProcess_title//Sabatier process
    capacity = 1
    valve_i = 2 // workaround until we have a better way to deal with dump valves
  }

  MODULE
  {
    name = ProcessController
    resource = _Haber
    title = #KERBALISM_HaberProcess_title//Haber process
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteIncinerator
    title = Waste incinerator
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteCompressor
    title = #KERBALISM_WasteIncinerator_title//Waste compressor
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _Anthraquinone
    title = #KERBALISM_AnthraquinoneProcess_title//Anthraquinone process
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _HydrazineProduction
    title = #KERBALISM_HydrazineProduction_title//Hydrazine production
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _NitroHydrazine
    title = #KERBALISM_HydrazineProductionN2_title//Hydrazine production N2
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _MRE
    title = #KERBALISM_MoltenRegolithElectrolysis_title//MRE
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _SOE
    title = #KERBALISM_SolidOxideElectrolysis_title//SOE
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _SCO
    title = #KERBALISM_SelectiveCatalyticOxidation_title//SCO
    capacity = 1
  }

  MODULE
  {
    name = Configure
    title = Chemical Plant
    slots = 1

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = electronics
        slots = 0
      }
    }

    SETUP
    {
      name = Water Electrolysis
      desc = #KERBALISM_WaterElectrolysis_desc//Split <b>Water</b> into its <b>Hydrogen</b> and <b>Oxygen</b> components.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterElectrolysis
      }
    }

    SETUP
    {
      name = Sabatier Process
      desc = #KERBALISM_SabatierProcess_desc//<b>Hydrogen</b> and <b>CarbonDioxide</b> react with a nickel catalyst to produce <b>Water</b> and <b>LiquidFuel</b>.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Sabatier
      }
    }

    SETUP
    {
      name = Haber Process
      desc = #KERBALISM_HaberProcess_desc//Produce <b>Ammonia</b> by <b>Nitrogen</b> fixation.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Haber
      }
    }

    SETUP
    {
      name = Waste Incinerator
      desc = #KERBALISM_WasteIncinerator_desc//Produce <b>CarbonDioxide</b> and <b>Water</b> by combustion of <b>Waste</b> with <b>Oxygen</b>. Includes a small exhaust turbine generator. If needed <b>Water</b> will be vented to continue <b>CarbonDioxide</b> extraction.
      tech = precisionEngineering

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteIncinerator
      }
    }

    SETUP
    {
      name = Waste Compressor
      desc = #KERBALISM_WasteCompressor_desc//Compact <b>Waste</b> to the density of <b>shielding material</b>.
      tech = precisionEngineering

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteCompressor
      }
    }

    SETUP
    {
      name = Anthraquinone Process
      desc = #KERBALISM_AnthraquinoneProcess_desc//Synthesize <b>Oxidizer</b> using a redox of <b>Oxygen</b> and <b>Hydrogen</b>.
      tech = advScienceTech

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Anthraquinone
      }
    }

    SETUP
    {
      name = Hydrazine Production
      desc = #KERBALISM_HydrazineProduction_desc//<b>Oxidizer</b> and <b>Ammonia</b> react to produce <b>MonoPropellant</b>, <b>Oxygen</b> and <b>Water</b>.
      tech = advScienceTech

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _HydrazineProduction
      }
    }

    SETUP
    {
      name = Hydrazine Production (N2 Injection)
      desc = #KERBALISM_HydrazineProductionN2_desc//<b>Oxidizer</b> and <b>Ammonia</b> with <b>Nitrogen</b> injection react to produce <b>MonoPropellant</b> and <b>Oxygen</b>.
      tech = experimentalScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _NitroHydrazine
      }
    }

    SETUP
    {
      name = Solid Oxide Electrolysis
      desc = #KERBALISM_SolidOxideElectrolysis_desc//Transform <b>CarbonDioxide</b> into <b>Oxygen</b> and <b>Shielding</b>.
      tech = experimentalScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _SOE
      }
    }

    SETUP
    {
      name = Molten Regolith Electrolysis
      desc = #KERBALISM_MoltenRegolithElectrolysis_desc//Extract <b>Oxygen</b>, <b>CarbonDioxide</b> and <b>Shielding</b> out of <b>Ore</b>. If needed <b>CarbonDioxide</b> and/or <b>Shielding</b> will be vented in order to continue the <b>Oxygen</b> extraction.
      tech = advScienceTech

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MRE
      }
    }

    SETUP
    {
      name = Selective Catalytic Oxidation
      desc = #KERBALISM_SelectiveCatalyticOxidation_desc//<b>Ammonia</b> and <b>Oxygen</b> react with a hydrotalcite-like catalyst to produce <b>Nitrogen</b> and <b>Water</b>.
      tech = experimentalScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _SCO
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = #KERBALISM_ChemicalPlant_title//Chemical Plant
    repair = Engineer
    mtbf = 72576000
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[MiniISRU]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 36.0      //  2.0 * 18  (MiniISRU is 18 times bigger than the kerbalism-chemicalplant)
  }
}

@PART[ISRU]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 90.0     //  36.0 * 5 / 2  (ISRU is 5 times bigger than the MiniISRU but has double the slots)
  }

  @MODULE[Configure]:HAS[#title[Chemical?Plant]]
  {
    %slots = 2
  }
}

@PART[kerbalism-chemicalplant]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 2.0
  }
}

// You get a slot upgrade, and you get a slot upgrade, EVERYONE gets a slot upgrade!
// Had to fix unintended shenenigans, assuming whoever patched this initially never expected multiple configures on the same part.
@PART[*]:HAS[@MODULE[Configure]]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{ 	@MODULE[Configure]:HAS[#title[Pod]] 			{ @UPGRADES { @UPGRADE:HAS[#name__[Upgrade?Slots]] { @slots = #$../../slots$
      @slots += 1 } } }
	@MODULE[Configure]:HAS[#title[Life?Support]] 	{ @UPGRADES { @UPGRADE:HAS[#name__[Upgrade?Slots]] { @slots = #$../../slots$
      @slots += 1 } } }
	@MODULE[Configure]:HAS[#title[Chemical?Plant]] 	{ @UPGRADES { @UPGRADE:HAS[#name__[Upgrade?Slots]] { @slots = #$../../slots$
      @slots += 1 } } }
}

// tweak number of slots
@PART[MK1CrewCabin|Mark2Cockpit|cupola]:NEEDS[ProfileDefault]:FOR[KerbalismDefault] 		{ @MODULE[Configure]:HAS[#title[Pod]] { @slots = 1 } }
@PART[mk3Cockpit_Shuttle]:NEEDS[ProfileDefault]:FOR[KerbalismDefault] 						{ @MODULE[Configure]:HAS[#title[Pod]] { @slots = 3 } }

// ============================================================================
// ISRU drills
// ============================================================================

@PART[MiniDrill,RadialDrill]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  !MODULE[ModuleResourceHarvester] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}

  // Crustal - - -
  MODULE
  {
    name = Harvester
    title = #KERBALISM_WaterExcavation_title//Water Excavation
    type = 0
    resource = Water
    min_abundance = 0.01
    // https://www.nasa.gov/sites/default/files/atoms/files/mars_ice_drilling_assessment_v6_for_public_release.pdf shows
    // water harvesters from Ice at a rate of 50-400 L/day, as a middle ground we choose 65 L/day for the small harvester
    // which when scaled by factor 5 for the big harvester becomes 325 L/day.
    rate = 0.003 // 65 L/day / (6 hours/day * 3600 seconds/hour)
    // This is the maximum abundance on a random planet/moon
    // And the average on Duna poles, which are the only place where at the time writing higher than baseline water levels are modeled
    // And lower than what is found on Kerbin and Laythe
    abundance_rate = 0.1
    ec_rate = 1.0
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_OreExcavation_title//Ore Excavation
    type = 0
    resource = Ore
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_NitrogenExcavation_title//Nitrogen Excavation
    type = 0
    resource = Nitrogen
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }

  MODULE
  {
    name = Configure
    title = Drill
    slots = 1

    SETUP
    {
      name = Water Extraction
      desc = #KERBALISM_WaterExcavation_desc//Extract <b>Water</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Water
      }

      RESOURCE
      {
        name = Water
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Ore Extraction
      desc = #KERBALISM_OreExcavation_desc//Extract <b>Ore</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ore
      }

      RESOURCE
      {
        name = Ore
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Nitrogen Extraction
      desc = #KERBALISM_NitrogenExcavation_desc//Extract <b>Nitrogen</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }

      RESOURCE
      {
        name = Nitrogen
        amount = 0
        maxAmount = 50
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = #KERBALISM_Harvester_title//Harvester
    repair = Engineer
    mtbf = 72576000
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[kerbalism-minipump,kerbalism-radialpump]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  !MODULE[ModuleResourceHarvester] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}
  !MODULE[ModuleAsteroidDrill] {}

  // Oceanic - - -
  MODULE
  {
    name = Harvester
    title = #KERBALISM_WaterPump_title//Water Pump
    type = 1
    resource = Water
    min_abundance = 0.02
    rate = 0.003
    ec_rate = 1.0
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_NitrogenPump_title//Nitrogen Pump
    type = 1
    resource = Nitrogen
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_AmmoniaPump_title//Ammonia Pump
    type = 1
    resource = Ammonia
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }

  MODULE
  {
    name = Configure
    title = Pump
    slots = 1

    SETUP
    {
      name = Water Extraction
      desc = #KERBALISM_WaterExcavation_desc2//Extract <b>Water</b> from the ocean.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Water
      }

      RESOURCE
      {
        name = Water
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Nitrogen Extraction
      desc = #KERBALISM_NitrogenExcavation_desc2//Extract <b>Nitrogen</b> from the ocean.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }

      RESOURCE
      {
        name = Nitrogen
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Ammonia Extraction
      desc = #KERBALISM_AmmoniaExtraction_desc//Extract <b>Ammonia</b> from the ocean.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ammonia
      }

      RESOURCE
      {
        name = Ammonia
        amount = 0
        maxAmount = 50
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = #KERBALISM_Harvester_title//Harvester
    repair = Engineer
    mtbf = 72576000
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[MiniDrill,kerbalism-minipump]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  @MODULE[Harvester],*
  {
    drill = ImpactTransform
    length = 1.08
  }
}

@PART[RadialDrill,kerbalism-radialpump]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  @MODULE[Harvester],*
  {
    drill = ImpactTransform
    length = 5.42
    @rate *= 5
    @ec_rate *= 5
  }
}


// ============================================================================
// atmospheric harvester
// the atmospheric experiment part is used as an atmospheric harvester
// ============================================================================

@PART[sensorAtmosphere]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = Harvester
    title = #KERBALISM_CO2Filter_title//CO2 Filter
    type = 2
    resource = CarbonDioxide
    min_abundance = 0.0025
    min_pressure = 4.0
    rate = 0.2
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_OxygenFilter_title//Oxygen Filter
    type = 2
    resource = Oxygen
    min_abundance = 0.02
    min_pressure = 5.0
    rate = 0.25
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_NitrogenFilter_title//Nitrogen Filter
    type = 2
    resource = Nitrogen
    min_abundance = 0.01
    min_pressure = 2.0
    rate = 0.35
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = #KERBALISM_AmmoniaFilter_title//Ammonia Filter
    type = 2
    resource = Ammonia
    min_abundance = 0.01
    min_pressure = 2.0
    rate = 0.35
    ec_rate = 0.5
  }

  MODULE
  {
    name = Configure
    title = Atmospheric Filter
    slots = 1

    SETUP
    {
      name = CO2 Filter
      desc = #KERBALISM_CO2Filter_desc//Extract <b>CO2</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = CarbonDioxide
      }
    }

    SETUP
    {
      name = Oxygen Filter
      desc = #KERBALISM_OxygenFilter_desc//Extract <b>Oxygen</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Oxygen
      }
    }

    SETUP
    {
      name = Nitrogen Filter
      desc = #KERBALISM_NitrogenFilter_desc//Extract <b>Nitrogen</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }
    }

    SETUP
    {
      name = Ammonia Filter
      desc = #KERBALISM_AmmoniaFilter_desc//Extract <b>Ammonia</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ammonia
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = #KERBALISM_Harvester_title//Harvester
    repair = Engineer
    mtbf = 72576000
    extra_cost = 1.0
    extra_mass = 0.5
  }

  @mass = 0.2
}

// ============================================================================
// Habitats
// ============================================================================

@PART[kerbalism-gravityring]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  %CrewCapacity = 6
}

// ============================================================================
// Pseudo-resources used by processes
// ============================================================================

RESOURCE_DEFINITION
{
  name = _NonRegenScrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Scrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _PressureControl
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _AirPump
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterRecycler
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteProcessor
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _ECGen
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _RTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _FuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MonopropFuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterElectrolysis
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Sabatier
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Haber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteIncinerator
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteCompressor
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Anthraquinone
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _HydrazineProduction
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _NitroHydrazine
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SOE
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MRE
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SCO
  density = 0.0
  isVisible = false
}

@RESOURCE_DEFINITION[Nitrogen]    // Remove Nitrogen from fuel flow priorities (Don't know what RoverDude was thinking??)
{
  @flowMode = ALL_VESSEL
}


// sickbay

RESOURCE_DEFINITION
{
  name = _SickbayRDU
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SickbayTV
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SickbayShower
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SickbayLaundry
  density = 0.0
  isVisible = false
}

// adding mass to a kerbal leads to all sorts of oddities in KSP.
// 1. the crew mass isn't accounted for in the editor immediately after adding/removing crew.
//    you have to make an additional change to the vessel for the numbers to add up.
// 2. a kerbal on EVA already has a mass of > 100kg in stock. the crew mass would be ADDED to that.
//    this would produce 95k of mass out of nothing for each EVA.
// it's convoluted, and I won't bother messing around with that any more.
//@PHYSICSGLOBALS:FOR[KerbalismDefault]
//{
//    %kerbalCrewMass = 0.09375
//}

// Remove pressure controlmodules from all habitats that have a max_pressure set
@PART[*]:HAS[@MODULE[Habitat]:HAS[#max_pressure]]:NEEDS[ProfileDefault]:AFTER[zzzKerbalismDefault]
{
  !MODULE[ProcessController]:HAS[#resource[_PressureControl]] {}
  @MODULE[Configure]
  {
    !SETUP[Pressure?Control] {}
  }
}
