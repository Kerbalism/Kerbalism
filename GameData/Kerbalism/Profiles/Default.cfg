// ============================================================================
// The default profile
// ============================================================================

Profile
{
  name = default

  Supply
  {
    resource = ElectricCharge
    on_eva = 33.0
    on_rescue = 10000.0
    low_message = $VESSEL batteries are almost empty@<i>We are squeezing the last bit of juice</i>|$VESSEL batteries are almost empty@<i>Shutting down non-essential systems</i>
    empty_message = There is no more ElectricCharge on $VESSEL@<i>Life support systems are off</i>|There is no more ElectricCharge on $VESSEL@<i>We lost control</i>
    refill_message = $VESSEL batteries recharged@<i>The crew is allowed music again</i>|$VESSEL batteries recharged@<i>Systems are back online</i>
  }

  Supply
  {
    resource = Food
    on_pod = 31.491405
    on_rescue = 50.0
    low_message = Food reserves are getting low on $VESSEL@<i>Anything edible is being scrutinized</i>
    empty_message = There is no more food on $VESSEL@<i>The crew prepare for the inevitable</i>
    refill_message = $VESSEL food reserves restored@<i>Double snack rations for everybody</i>
  }

  Supply
  {
    resource = Water
    on_pod = 12.1
    on_rescue = 25.0
    low_message = Water reserves are getting low on $VESSEL@<i>Hygiene schedule suspended until further notice</i>
    empty_message = There is no more water on $VESSEL@<i>Licking the condense is not a viable solution</i>
    refill_message = $VESSEL water reserves restored@<i>The situation looks much better now</i>
  }

  Supply
  {
    resource = Oxygen
    on_pod = 2978.7
    on_eva = 200.0
    on_rescue = 5000.0
    low_message = Oxygen reserves are dangerously low on $VESSEL@<i>There is mild panic among the crew</i>
    empty_message = There is no more oxygen on $VESSEL@<i>Everybody stop breathing</i>
    refill_message = $VESSEL oxygen reserves restored@<i>The crew is taking a breather</i>
  }

  Supply
  {
    resource = CarbonDioxide
    low_message = Carbon dioxide reserves are getting low on $VESSEL@<i></i>
    empty_message = There is no more carbon dioxide on $VESSEL@<i>The plants on board have filed a formal complaint</i>
    refill_message = $VESSEL carbon dioxide reserves restored@<i>The plants on board are grateful</i>
  }

  Supply
  {
    resource = Nitrogen
    on_rescue = 100.0
    low_message = Nitrogen reserves are getting low on $VESSEL
    empty_message = There is no more nitrogen on $VESSEL@<i>Time to go back in the suits</i>
    refill_message = $VESSEL nitrogen reserves restored@<i>Let's get out of these damn suits</i>
  }

  Supply
  {
    resource = Hydrogen
    low_message = Hydrogen tanks are almost empty on $VESSEL
    empty_message = There is no more hydrogen on $VESSEL tanks
    refill_message = $VESSEL hydrogen tanks refilled
  }

  Supply
  {
    resource = Ammonia
    low_message = Ammonia tanks are almost empty on $VESSEL
    empty_message = There is no more ammonia on $VESSEL tanks@<i>Maybe it is time for some smelly alternative</i>
    refill_message = $VESSEL ammonia tanks refilled
  }

  Rule
  {
    name = climatization
    input = ElectricCharge
    rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
    degeneration = 0.00000007 // about 2h at 100k temp diff in 20m^3
    modifier = temperature,volume,per_capita
    warning_message = $ON_VESSEL$KERBAL feels cold|$ON_VESSEL$KERBAL is sweating
    danger_message = $ON_VESSEL$KERBAL is freezing to death|$ON_VESSEL$KERBAL is burning alive
    fatal_message = $ON_VESSEL$KERBAL froze to death|$ON_VESSEL$KERBAL was burned alive
    relax_message = $ON_VESSEL$KERBAL hypothermia is under control|$ON_VESSEL$KERBAL is hugging the climatizer
  }

  Rule
  {
    name = eating
    input = Food
    output = Waste
    rate = 3.145 // 1.77 Kg per-day, Food to Waste mass difference is calculated internally
    interval = 10800.0 // 2 meals per-day
    degeneration = 0.03333 // 30 meals, 15 days
    warning_message = $ON_VESSEL$KERBAL is hungry
    danger_message = $ON_VESSEL$KERBAL is starving
    fatal_message = $ON_VESSEL$KERBAL starved to death
    relax_message = $ON_VESSEL$KERBAL is enjoying some snacks right now
  }

  Rule
  {
    name = drinking
    input = Water
    output = WasteWater
    rate = 0.605 // 2.42 Kg per-day, Water to WasteWater mass difference is calculated internally
    interval = 5400.0 // 4 drinks per-day
    degeneration = 0.08333 // 12 drinks, 3 days
    warning_message = $ON_VESSEL$KERBAL is thirsty
    danger_message = $ON_VESSEL$KERBAL is dehydrated
    fatal_message = $ON_VESSEL$KERBAL died from dehydration
    relax_message = $ON_VESSEL$KERBAL is enjoying some drinks right now
  }

  Rule
  {
    name = breathing
    input = Oxygen
    output = WasteAtmosphere
    rate = 0.02758 // 0.84 Kg per-day, Oxygen to WasteAtmosphere mass difference is calculated internally
    degeneration = 0.0055555 // 3 minutes
    modifier = breathable
    warning_message = $ON_VESSEL$KERBAL can't breathe
    danger_message = $ON_VESSEL$KERBAL is suffocating
    fatal_message = $ON_VESSEL$KERBAL suffocated to death
    relax_message = $ON_VESSEL$KERBAL is breathing again
  }

  Rule
  {
    name = humidity
    input = MoistAtmosphere
    output = MoistAtmosphere
    monitor = true // Monitor `input` do not consume it. (This parameter stops the input resource from having its amount reduced).  
            // Rules will not execute without an `input` (unless there is internal code in the dll to handle those specific rules) nor will
            // they monitor an `output`, hence why both `input` and `output` are the same resource.
            // The `input` parameter is used in conjunction with the `output_only` parameter to allow the rule to monitor the resource so that
            // it can display messages and allow the in-game panels to show the relevant information.
    monitor_offset = 0.6 // Base humidity of 60% - ***DO NOT CHANGE*** Bad things will happen as this value is Hard-Coded in Habitation.
    rate = 0.002879122904
            // 50Ltr per-day @100% humidity. Contains 850 mL of Water per-day per Kerbal. If a kerbal runs out of food or water the water contained
            // in its breath is sourced from its internal fat reserves of all the snacks previously eaten. (Humans breath is at 100% humidity)
    input_threshold = 0.95
            // When `input` resource reaches this percentage of its max capacity trigger degeneration. (The humidity is set to trigger at 95%)
    degeneration = 0.0000231481 // 2 days
    variance = 0.25
    modifier = humidity,breathable // if we are on a planet with breathable atmosphere vent moisture outside.
    warning_message = $ON_VESSEL$KERBAL has clammy hands 
    danger_message = $ON_VESSEL$KERBAL is sitting in a damp patch and has a chapped bum 
    fatal_message = $ON_VESSEL$KERBAL died from electrocution touching moisture soaked equipment 
    relax_message = $ON_VESSEL$KERBAL is dry again
  }

  Rule
  {
    name = co2 poisoning
    degeneration = 0.0005555 // 30 minutes
    modifier = poisoning
    warning_message = $ON_VESSEL$KERBAL's head feels light
    danger_message = $ON_VESSEL$KERBAL seems unable to breath properly
    fatal_message = $ON_VESSEL$KERBAL died of co2 poisoning
    relax_message = $ON_VESSEL$KERBAL is breathing again
  }

  Rule
  {
    name = stress
    degeneration = 0.00000000463 // 10000 days
    variance = 0.33 // add per-kerbal variance
    modifier = living_space,comfort,pressure
    breakdown = true // trigger breakdown event instead of death
    warning_message = $ON_VESSEL$KERBAL is losing $HIS_HER mind@<i>Concentration is becoming a problem</i>
    danger_message = $ON_VESSEL$KERBAL is about to breakdown@<i>Starting to hear voices</i>
    relax_message = $ON_VESSEL$KERBAL is thinking straight now@<i>Let's do it again!</i>
  }

  Rule
  {
    name = radiation
    degeneration = 1.0 // just use the modifier
    variance = 0.1 // add per-kerbal variance
    modifier = radiation,shielding
    warning_threshold = 25.0
    danger_threshold = 37.5
    fatal_threshold = 50.0
    warning_message = $ON_VESSEL$KERBAL has been exposed to intense radiation
    danger_message = $ON_VESSEL$KERBAL is reporting symptoms of radiation poisoning
    fatal_message = $ON_VESSEL$KERBAL died after being exposed to extreme radiation
    relax_message = $ON_VESSEL$KERBAL has recovered from radiation exposure
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member for 1 day
  Process
  {
    name = non-regenerative scrubber
    modifier = _NonRegenScrubber
    input = WasteAtmosphere@0.040402         // efficiency starts at 2 (2 x a pods scrubber), reaches 1 in 6h, then drops below
    input = _NonRegenScrubber@0.000023148    // consume 0.5 capacity in 6h, simulates the scrubber wearing out over time.
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member
  Process
  {
    name = scrubber
    modifier = _Scrubber
    input = ElectricCharge@0.025
    input = WasteAtmosphere@0.020201
    output = CarbonDioxide@0.020201
    dump = true
  }

  // convention: 1 capacity = enough to compensate for leaks in 70 m^2 surface (a cube of 40 m^3 volume)
  Process
  {
    name = pressure control
    modifier = _PressureControl,breathable
    input = ElectricCharge@0.00858
    input = Nitrogen@0.35
    output = Atmosphere@0.35
    dump = false
  }

  // convention: 1 capacity = enough to reclaim moisture output of 1 crew member
  // 50Ltr per-day @100% humidity. Contains 850 mL of Water per-day per Kerbal. If a kerbal runs out of food or water the water contained
  // in its breath is sourced from its internal fat reserves of all the snacks previously eaten. (Humans breath is at 100% humidity)
  Process
  {
    name = humidity controller
    modifier = _HumidityController
    input = ElectricCharge@0.037
    input = MoistAtmosphere@0.002879122904
            // Calculated with the amount of water in a Liter of air @ 0.017mL/L (in real world this is approx. 100% saturation).   
            // 850mL of Water divided by 0.017mL = 50L of MoistAtmosphere.
            // 50L divided by MoistAtmosphere density of 804mL/L = 62.18905473L
            // 62.18905473L / 21600 seconds (a Kerbal day of 6hrs) = 0.002879122904/s
    output = Water@0.0000393519 // 850mL divided by density of Water = 0.85L, divided by 21600 seconds (a Kerbal day of 6hrs) = 0.0000393519/s
    dump = true
  }

  // convention: 1 capacity = enough to recycle output of 1 crew member
  Process
  {
    name = water recycler
    modifier = _WaterRecycler
    input = ElectricCharge@0.0446
    input = WasteWater@0.0001115
    output = Water@0.0000948 // ISS currently achieves 75% Water recovery from urine, although its design target was 85% (quality of urine is issue), we use the design target to be gentle on our users
    output = Ammonia@0.000652 // Based on https://en.wikipedia.org/wiki/Urine assume we recover 90% of 0.5% mass percentage of Ammonia, keep in mind Ammonia is far less dense than Water
    output = CarbonDioxide@0.000257 // Based on https://en.wikipedia.org/wiki/Urine assume we recover 90% of 0.5% mass percentage of CarbonDioxide, keep in mind CO2 is far less dense than Water
    dump = Ammonia,CarbonDioxide
  }

  // convention: 1 capacity = enough to process output of 1 crew member
  Process
  {
    name = waste processor
    modifier = _WasteProcessor
    input = ElectricCharge@0.065556
    input = Waste@0.00010926
    // According to https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4500995/ feces contains approximately 0.7% nitrogen.
    // Feces is considered to the dominant source of Waste
    // Waste is 975.3 times more dense than Ammonia
    output = Ammonia@0.000746
  }

  // convention: 1 capacity = enough to compress output of 1 crew member
  Process
  {
    name = waste compressor
    modifier = _WasteCompressor
    input = ElectricCharge@1.2
    input = Waste@0.00010926
    output = Shielding@0.0000003847183
    dump = false
  }

  Process
  {
    name = atmo leaks
    modifier = surface,breathable
    input = Atmosphere@0.000148
    // from ISS: 899 m³ volume, 452 m² surface (estimated), 0.227 Kg/day (structural) + 1.543 Kg/day (activities)
  }

  Process
  {
    name = radioisotope generator
    modifier = _RTG
    input = _RTG@0.000000001888 // 28.8 kerbin-year half-life
    output = ElectricCharge@1.0
  }

  Process
  {
    name = fuel cell
    modifier = _FuelCell
    input = Hydrogen@1.0011122892
    input = Oxygen@0.5065967413
    output = Water@0.0008043014
    output = ElectricCharge@0.5
    dump = Water
  }

  Process
  {
    name = monoprop fuel cell
    modifier = _MonopropFuelCell
    input = Oxygen@0.510619148925
    input = MonoPropellant@0.000901270123875 // (Hydrazine@0.000718143525)
    output = Nitrogen@0.5038381295
    output = Water@0.0008106876
    output = ElectricCharge@0.1
    dump = Nitrogen,Water
  }

  Process
  {
    name = water electrolysis
    modifier = _WaterElectrolysis
    input = ElectricCharge@0.5
    input = Water@0.0008043014
    output = Hydrogen@1.0
    output = Oxygen@0.5065967706
    dump = false
  }

  Process
  {
    name = water electrolysis oxygen priority
    modifier = _WaterElectrolysisO2Priority
    input = ElectricCharge@0.5
    input = Water@0.0008043014
    output = Hydrogen@1.0
    output = Oxygen@0.5065967706
    dump = Hydrogen
  }

  Process
  {
    name = water electrolysis hydrogen priority
    modifier = _WaterElectrolysisH2Priority
    input = ElectricCharge@0.5
    input = Water@0.0008043014
    output = Hydrogen@1.0
    output = Oxygen@0.5065967706
    dump = Oxygen
  }

  Process
  {
    name = waste incinerator
    modifier = _WasteIncinerator
    input = Waste@0.0001082667 // H18C82
    input = Oxygen@0.1589194249
    output = CarbonDioxide@0.1497439605
    output = Water@0.0000131259
    output = ElectricCharge@0.005
    dump = Water,ElectricCharge
  }

  Process
  {
    name = sabatier process
    modifier = _Sabatier
    input = ElectricCharge@0.5
    input = CarbonDioxide@0.2514920085
    input = Hydrogen@1.0
    output = Water@0.0004017039
    output = LiquidFuel@0.0001788570195417 // (Methane@0.2494519101)
    dump = Water
  }

  Process
  {
    name = sabatier process water priority
    modifier = _SabatierH2OPriority
    input = ElectricCharge@0.5
    input = CarbonDioxide@0.2514920085
    input = Hydrogen@1.0
    output = Water@0.0004017039
    output = LiquidFuel@0.0001788570195417 // (Methane@0.2494519101)
    dump = LiquidFuel
  }

  Process
  {
    name = haber process
    modifier = _Haber
    input = Nitrogen@0.3328758387
    input = Hydrogen@1.0
    output = Ammonia@0.6584235036
  }

  Process
  {
    name = anthraquinone process
    modifier = _Anthraquinone
    input = Hydrogen@1.0
    input = Oxygen@1.0120677706
    output = Oxidizer@0.001516915615 // (HydrogenPeroxide@0.0010461487)
  }

  Process
  {
    name = hydrazine production
    modifier = _HydrazineProduction
    input = Ammonia@3.9863420068
    input = Oxidizer@0.003061324535 // (HydrogenPeroxide@0.0021112583)
    output = Water@0.0032427540
    output = MonoPropellant@0.0036050845115 // (Hydrazine@0.0028725773)
  }

  Process
  {
    name = solid oxide electrolysis
    modifier = _SOE
    input = ElectricCharge@1.0
    input = CarbonDioxide@2.0341107125
    output = Oxygen@2.0464446424
    // Carbon@0.0005157443 is wasted
  }

  Process
  {
    name = molten regolith electrolysis
    modifier = _MRE
    input = ElectricCharge@2.0 // 2 kW MRE reactor at 2300 K with heat corrosion resistant crucible 
    input = Ore@0.00006342
    output = Oxygen@0.088843
    output = Shielding@0.000000112
    // Slag is wasted
  }

  Process
  {
    name = selective catalytic oxidation
    modifier = _SCO
    input = ElectricCharge@0.5
    input = Ammonia@0.0500000000
    input = Oxygen@0.0384276596
    output = Nitrogen@0.0252781775
    output = Water@0.0000610100
    dump = Water
  }
}


// ============================================================================
// Add Part Upgrade for upgradeable slots
// ============================================================================

PARTUPGRADE
{
  name = Upgrade-Slots
  partIcon = kerbalism-chemicalplant
  techRequired = electronics
  entryCost = 20000
  title = Life support and Chemical plant slot upgrade
  manufacturer = Lambda Aerospace 
  description = Adds an additional configurable slot to Manned pods, ECLSS module and Chemical plants. 
}


// ============================================================================
// Add configurable Life Support System to all manned parts
// ============================================================================

@PART[*]:HAS[#CrewCapacity[>0]]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = ProcessController
    resource = _Scrubber
    title = Scrubber
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = Pressure control
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _HumidityController
    title = Humidity controller
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _WaterRecycler
    title = Water recycler
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteProcessor
    title = Waste processor
    capacity = #$/CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = Monoprop+O2 fuel cell
    capacity = #$/CrewCapacity$
    running = false
  }

  @MODULE[ProcessController],*
  {
    @capacity *= 1.67
  }

  MODULE
  {
    name = Configure
    title = Pod
    slots = 2

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = electronics
        slots = 0
      }
    }

    SETUP
    {
      name = Scrubber
      desc = A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Scrubber
      }
    }

    SETUP
    {
      name = Pressure Control
      desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
      tech = engineering101
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _PressureControl
      }

      RESOURCE
      {
        name = Nitrogen
        amount = #$/CrewCapacity$
        maxAmount = #$/CrewCapacity$
        @amount *= 500
        @maxAmount *= 500
      }
    }

    SETUP
    {
      name = Humidity Controller
      desc = Reclaims <b>Water</b> out of the internal atmosphere to maintain humidity.
      tech = survivability
      mass = 0.015
      cost = 300


      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _HumidityController
      }
    }

    SETUP
    {
      name = Water Recycler
      desc = Filter impurities out of <b>WasteWater</b>.
      tech = spaceExploration
      mass = 0.05
      cost = 500


      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterRecycler
      }

      RESOURCE
      {
        name = WasteWater
        amount = 0
        maxAmount = #$/CrewCapacity$
        @maxAmount *= 5
      }
    }

    SETUP
    {
      name = Waste Processor
      desc = Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
      tech = advExploration
      mass = 0.05
      cost = 500

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteProcessor
      }

      RESOURCE
      {
        name = Waste
        amount = 0
        maxAmount = #$/CrewCapacity$
        @maxAmount *= 5
      }
    }

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = An emergency fuel cell that burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = advElectrics
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }
}

// boost Mk3 Shuttle cockpit Nitrogen storage
@PART[mk3Cockpit_Shuttle]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[Configure]
  {
    @SETUP[Pressure?Control]
    {
	  @RESOURCE[Nitrogen]
      {
        @amount *= 3
        @maxAmount *= 3
      }
    }
  }
}

// tweak number of slots
@PART[MK1CrewCabin|Mark2Cockpit|cupola]:NEEDS[ProfileDefault]:FOR[Kerbalism] { @MODULE[Configure] { @slots = 1 } }
@PART[mk3Cockpit_Shuttle]:NEEDS[ProfileDefault]:FOR[Kerbalism] { @MODULE[Configure] { @slots = 3 } }

// manned pod slot upgrades
@PART[*]:HAS[#CrewCapacity[>0]]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{ @MODULE[Configure] { @UPGRADES { @UPGRADE { @slots = #$../../slots$
      @slots += 1 } } }
}


// ============================================================================
// Add configurable Life Support System to Life Support Unit part
// ============================================================================

@PART[kerbalism-lifesupportmodule]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = ProcessController
    resource = _Scrubber
    title = Scrubber
    capacity = 2
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = Pressure control
    capacity = 2
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _HumidityController
    title = Humidity controller
    capacity = 2
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _WaterRecycler
    title = Water recycler
    capacity = 2
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteProcessor
    title = Waste processor
    capacity = 2
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = Monoprop+O2 fuel cell
    capacity = 2
    running = true
  }

  @MODULE[ProcessController],*
  {
    @capacity *= 1.67
  }

  MODULE
  {
    name = Configure
    title = Life Support
    slots = 2

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = electronics
        slots = 0
      }
    }

    SETUP
    {
      name = Scrubber
      desc = A dual-bed vacuum-exposing regenerative scrubber that sequesters <b>CarbonDioxide</b> from the internal atmosphere.
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Scrubber
      }
    }

    SETUP
    {
      name = Pressure Control
      desc = Use <b>Nitrogen</b> to maintain the internal atmosphere at a comfortable pressure.
      mass = 0.01
      cost = 250

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _PressureControl
      }
    }

    SETUP
    {
      name = Humidity Controller
      desc = Reclaims <b>Water</b> out of the internal atmosphere to maintain humidity.
      mass = 0.015
      cost = 300


      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _HumidityController
      }
    }

    SETUP
    {
      name = Water Recycler
      desc = Filter impurities out of <b>WasteWater</b>.
      tech = spaceExploration
      mass = 0.05
      cost = 500

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterRecycler
      }
    }
 
    SETUP
    {
      name = Waste Processor
      desc = Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
      tech = advExploration
      mass = 0.05
      cost = 500

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteProcessor
      }
	}

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = advElectrics
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }
}  

// ECLSS slot upgrades
@PART[kerbalism-lifesupportmodule]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{ @MODULE[Configure] { @UPGRADES { @UPGRADE { @slots = #$../../slots$
      @slots += 1 } } }
}
 

// ============================================================================
// Add scrubber process to EVA kerbals
// ============================================================================

@PART[kerbalEVA,kerbalEVAfemale]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = ProcessController
    resource = _NonRegenScrubber
    title = Non-Regen Scrubber
    capacity = 1.0
    toggle = true
    running = true
  }
}


// ============================================================================
// Add configurable supplies to inline containers
// ============================================================================

@PART[kerbalism-container-inline-*]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = Configure
    title = Supply Container
    slots = 1

    SETUP
    {
      name = Supplies
      desc = Store a balanced supply of <b>Food</b> and <b>Water</b>.

      RESOURCE
      {
        name = Food
        amount = 0.7224224
        maxAmount = 0.7224224
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }

      RESOURCE
      {
        name = Water
        amount = 0.2775776
        maxAmount = 0.2775776
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Waste
      desc = Store solid and liquid organic <b>Waste</b>.

      RESOURCE
      {
        name = Waste
        amount = 0
        maxAmount = 0.4949706
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }

      RESOURCE
      {
        name = WasteWater
        amount = 0
        maxAmount = 0.5050294
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Food

      RESOURCE
      {
        name = Food
        amount = 1
        maxAmount = 1
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Water

      RESOURCE
      {
        name = Water
        amount = 1
        maxAmount = 1
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }
  }
}


// ============================================================================
// Add configurable supplies to radial containers
// ============================================================================

@PART[kerbalism-container-radial-*]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = Configure
    title = Pressurized Tank
    slots = 1

    SETUP
    {
      name = Oxygen
      desc = Store pressurized <b>Oxygen</b> gas.

      RESOURCE
      {
        name = Oxygen
        amount = 809.22
        maxAmount = 809.22
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Nitrogen
      desc = Store pressurized <b>Nitrogen</b> gas.

      RESOURCE
      {
        name = Nitrogen
        amount = 659.4
        maxAmount = 659.4
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Hydrogen
      desc = Store pressurized <b>Hydrogen</b> gas.

      RESOURCE
      {
        name = Hydrogen
        amount = 788.1
        maxAmount = 788.1
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Ammonia
      desc = Store pressurized <b>Ammonia</b> gas.

      RESOURCE
      {
        name = Ammonia
        amount = 913.0
        maxAmount = 913.0
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = CarbonDioxide
      desc = Store pressurized <b>Carbon dioxide</b> gas.

      RESOURCE
      {
        name = CarbonDioxide
        amount = 601.36
        maxAmount = 601.36
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }

    SETUP
    {
      name = Xenon Gas
      desc = Store pressurized <b>Xenon</b> gas.
      tech = ionPropulsion

      RESOURCE
      {
        name = XenonGas
        amount = 836.26
        maxAmount = 836.26
        @amount *= #$../../../ContainerVolume$
        @maxAmount *= #$../../../ContainerVolume$
      }
    }
  }
}


// ============================================================================
// Setup greenhouse
// ============================================================================

@PART[kerbalism-greenhouse]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = Greenhouse
    // Please note the Greenhouse is its own process and does not work like the standard processes, for example the WasteAtmosphere and
	// CarbonDioxide INPUT_RESOURCE parameters work together and can internally interchange information depending on conditions, see below. 
	
    crop_resource = Food                // name of resource produced by harvests
    // Based on design targets from Prototype Lunar Greenhouse (see https://www.ag.arizona.edu/lunargreenhouse/MidReviews.htm ):
    // Design targets are on slide 18 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
    // Prototype Lunar Greenhouse geometry can be found on slide 14 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
    // Much larger design for producing food for 6 people can be found here (values not used): https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
    // This Greenhouse is assumed to have 24 m^3 volume dedicated to food production (all greenhouses in mod support files are calculated relative to this one).
    // This Greenhouse is intended to support 0.5 Kerbal just like the Prototype Lunar Greenhouse.
    // Harvest time is 200 days, but in order to avoid micromanagement this greenhouse supports 0.5 Kerbal for 210 days.
    // Kerbals need 1258 food per 200 days, converted to 210 days that is 1320.9 food.
    crop_size = 660.45                  // amount of resource produced by harvests
    crop_rate = 0.00000023148           // growth per second when all conditions apply, a fully grown crop equals value of 1.0
    ec_rate = 2.5                       // EC/s consumed by the lamp at max intensity

    light_tolerance = 400.0             // minimum lighting flux required for growth, in W/m^2
    pressure_tolerance = 0.1            // minimum pressure required for growth, in sea level atmospheres
    radiation_tolerance = 0.000008333   // maximum radiation allowed for growth in rad/s, considered after shielding is applied

    lamps = Cylinder001                 // object with emissive texture used to represent lamp intensity graphically
    shutters = door                     // animation to manipulate shutters
    plants =                            // animation to represent plant growth graphically

    INPUT_RESOURCE
    {
      name = Ammonia
      rate = 0.00229                    // 15 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 6 hours * rate == 15 * crop_size
    }

    // Photosynthesis reaction: 2xH2O + CO2 -> O2 + CH2O + H2O
    // Note that CH2O is an intermediate carbohydrate, energy that goes into the food, in the actual food it can be any CxHyOz compound

    // In a hydroponic system plants grow in water containing nutrients, the system is assumed to be closed loop.
    // Therefore only the water loss during photosynthesis is modeled.

    // Water efficient foods require around 250-500 L water per kg of crop (see https://www.theguardian.com/news/datablog/2013/jan/10/how-much-water-food-production-waste)
    // In a regenerative system (see https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf slide 19) water is also produced.
    // In this example effective water consumption is 4.3 L per day. Every day approximately 2.4 kg of biomass is produced (not all of which can be eaten).
    // In this example the effective water consumption per kg of biomass is 1.8 L/kg.
    // TODO: Figure out what percentage of biomass actually becomes Food.
    // TODO: Figure how to recover the non-eatable biomass.
    // 1 unit of Food has a mass 0.28 kg (see community resource pack), therefore we will use 1.8 L/kg * 0.28 kg = 0.5 L of Water
    // 1 unit of Water matches 1 L, so we need 0.5 units of Water per unit of Food.
    INPUT_RESOURCE
    {
      name = Water
      rate = 0.0000764            // 0.5 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 6 hours * rate == 0.5 * crop_size
    }

    INPUT_RESOURCE
    {
      name = WasteAtmosphere      // Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
      rate = 0.020201             // Matched to a Kerbals WasteAtmosphere output which is 75% of required CO2 for crops according to documents linked above
    }                             // WasteAtmosphere has the same density as CO2

    INPUT_RESOURCE
    {
      name = CarbonDioxide        // Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
                                  // present then it will be used in place of CO2 injection
      rate = 0.00505025           // Remaining 25% of CO2 required.
    }

    // Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
    // CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
    // If there is not enough resources then the plants will suffer.

    OUTPUT_RESOURCE
    {
      name = Oxygen
      rate = 0.02758                    // 100% of oxygen required by 1 crew member, based on Prototype Lunar Greenhouse design targets
    }                                   // (percentage is factor 2 larger than food)
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = Pressure control
    capacity = 0.2143
    running = true
  }

  RESOURCE
  {
    name = Ammonia
    amount = 7100            // enough for 206.5 days including reclaimed ammonia from wastes, one crop cycle, two greenhouses combined
    maxAmount = 7100
  }

  // CarbonDioxide is provided because humans don't provide enough CO2 for their required food production
  // Both https://www.space.com/9353-lunar-greenhouse-grow-food-future-moon-colonies.html and
  // https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
  // mention CO2 injection despite being closed loop systems.
  RESOURCE
  {
    name = CarbonDioxide
    amount = 67000           // enough for 204.5 days of CO2 injection (25% of total CO2 required), one crop cycle, two greenhouses combined
    maxAmount = 67000
  }

  // To support the pressure control
  RESOURCE
  {
    name = Nitrogen
    amount = 10000           // enough for 214 days , one crop cycle
    maxAmount = 10000
  }

  RESOURCE
  {
    name = Water
    amount = 250             // enough for 205 days including reclaimed water from wastes and humidity, one crop cycle, two greenhouses combined
    maxAmount = 250
  }
}


// ============================================================================
// RTG
// ============================================================================

@PART[rtg]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = ProcessController
    resource = _RTG
    title = RTG
    capacity = 0.75
    running = true
    toggle = false
  }

  !MODULE[ModuleGenerator] {}
}


// ============================================================================
// Fuel cells
// ============================================================================

@PART[FuelCell]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter] {}
  !RESOURCE[ElectricCharge] {}

  MODULE
  {
    name = ProcessController
    resource = _FuelCell
    title = H2+O2 fuel cell
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = Monoprop+O2 fuel cell
    capacity = 5
  }

  MODULE
  {
    name = Configure
    title = Fuel Cell
    slots = 1

    SETUP
    {
      name = Hydrogen Oxygen Fuel Cell
      desc = Burns <b>Hydrogen</b> gas and <b>Oxygen</b> gas, producing <b>Water</b> as a by-product.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _FuelCell
      }
    }

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = advElectrics

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = Fuel Cell
    redundancy = Power Generation
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.5
  }

  @TechRequired = basicScience
}

@PART[FuelCellArray]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter] {}
  !RESOURCE[ElectricCharge] {}

  MODULE
  {
    name = ProcessController
    resource = _FuelCell
    title = H2+O2 fuel cell
    capacity = 6
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = Monoprop+O2 fuel cell
    capacity = 30
  }

  MODULE
  {
    name = Configure
    title = Fuel Cell
    slots = 1

    SETUP
    {
      name = Hydrogen Oxygen Fuel Cell
      desc = Burns <b>Hydrogen</b> gas and <b>Oxygen</b> gas, producing <b>Water</b> as a by-product.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _FuelCell
      }
    }

    SETUP
    {
      name = Monoprop Oxygen Fuel Cell
      desc = Burns <b>MonoPropellant</b> and <b>Oxygen</b> gas, producing <b>Water</b> and <b>Nitrogen</b> gas as by-products.
      tech = advElectrics

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = Fuel Cell
    redundancy = Power Generation
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.5
  }
}


// ============================================================================
// ISRU chemical plants
// ============================================================================

@PART[kerbalism-chemicalplant,MiniISRU,ISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Lf+Ox]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[LiquidFuel]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Oxidizer]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Monoprop]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[MonoPropellant]] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}

  MODULE
  {
    name = ProcessController
    resource = _WaterElectrolysis
    title = Water electrolysis
    capacity = 1
  }
  
  MODULE
  {
    name = ProcessController
    resource = _WaterElectrolysisO2Priority
    title = Water electrolysis oxygen priority
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _WaterElectrolysisH2Priority
    title = Water electrolysis hydrogen priority
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _Sabatier
    title = Sabatier process LF priority
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _SabatierH2OPriority
    title = Sabatier process water priority
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _Haber
    title = Haber process
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteIncinerator
    title = Waste incinerator
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _WasteCompressor
    title = Waste compressor
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _Anthraquinone
    title = Anthraquinone process
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _HydrazineProduction
    title = Hydrazine production
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _MRE
    title = MRE
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _SOE
    title = SOE
    capacity = 1
  }

  MODULE
  {
    name = ProcessController
    resource = _SCO
    title = SCO
    capacity = 1
  }

  MODULE
  {
    name = Configure
    title = Chemical Plant
    slots = 1

    UPGRADES
    {
      UPGRADE
      {
        name__ = Upgrade-Slots
        techRequired__ = electronics
        slots = 0
      }
    }

    SETUP
    {
      name = Water Electrolysis
      desc = Split <b>Water</b> into its <b>Hydrogen</b> and <b>Oxygen</b> components.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterElectrolysis
      }
    }
    
    SETUP
    {
      name = Water Electrolysis (O2 priority)
      desc = Split <b>Water</b> into its <b>Hydrogen</b> and <b>Oxygen</b> components. If necessary Hydrogen will be vented in order to continue the Oxygen extraction.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterElectrolysisO2Priority
      }
    }

    SETUP
    {
      name = Water Electrolysis (H2 priority)
      desc = Split <b>Water</b> into its <b>Hydrogen</b> and <b>Oxygen</b> components. If necessary Oxygen will be vented in order to continue the Hydrogen extraction.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WaterElectrolysisH2Priority
      }
    }

    SETUP
    {
      name = Sabatier Process (LF priority)
      desc = <b>Hydrogen</b> and <b>CarbonDioxide</b> react with a nickel catalyst to produce <b>Water</b> and <b>LiquidFuel</b>. If needed Water will be vented in order to continue the LiquidFuel extraction.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Sabatier
      }
    }

    SETUP
    {
      name = Sabatier Process (H2O priority)
      desc = <b>Hydrogen</b> and <b>CarbonDioxide</b> react with a nickel catalyst to produce <b>Water</b> and <b>LiquidFuel</b>. If needed LiquidFuel will be vented in order to continue the Water extraction.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _SabatierH2OPriority
      }
    }

    SETUP
    {
      name = Haber Process
      desc = Produce <b>Ammonia</b> by <b>Nitrogen</b> fixation.

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Haber
      }
    }

    SETUP
    {
      name = Waste Incinerator
      desc = Produce <b>CarbonDioxide</b> by combustion of <b>Waste</b> with <b>Oxygen</b>. Includes a small exhaust turbine generator.
      tech = precisionEngineering

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteIncinerator
      }
    }

    SETUP
    {
      name = Waste Compressor
      desc = Compact <b>Waste</b> to the density of lead, for use in radiation shielding.
      tech = precisionEngineering

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteCompressor
      }
    }

    SETUP
    {
      name = Anthraquinone Process
      desc = Synthesize <b>Oxidizer</b> using a redox of <b>Oxygen</b> and <b>Hydrogen</b>.
      tech = advScienceTech

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _Anthraquinone
      }
    }

    SETUP
    {
      name = Hydrazine Production
      desc = <b>Oxidizer</b> and <b>Ammonia</b> react to produce <b>MonoPropellant</b> and <b>Water</b>.
      tech = advScienceTech

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _HydrazineProduction
      }
    }

    SETUP
    {
      name = Solid Oxide Electrolysis
      desc = Transform <b>CarbonDioxide</b> into <b>Oxygen</b>.
      tech = experimentalScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _SOE
      }
    }

    SETUP
    {
      name = Molten Regolith Electrolysis
      desc = Extract <b>Oxygen</b> out of <b>Ore</b>.
      tech = experimentalScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MRE
      }
    }

    SETUP
    {
      name = Selective Catalytic Oxidation
      desc = <b>Ammonia</b> and <b>Oxygen</b> react with a hydrotalcite-like catalyst to produce <b>Nitrogen</b> and <b>Water</b>.
      tech = experimentalScience

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _SCO
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = Chemical Plant
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[MiniISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 3.3
  }
}

@PART[ISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 5.0
  }

  @MODULE[Configure]
  {
    %slots = 2
  }
}

@PART[kerbalism-chemicalplant]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 2.0
  }
}

// ISRU slot upgrades
@PART[kerbalism-chemicalplant,MiniISRU,ISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{ @MODULE[Configure] { @UPGRADES { @UPGRADE { @slots = #$../../slots$
      @slots += 1 } } }
}


// ============================================================================
// ISRU drills
// ============================================================================

@PART[MiniDrill,RadialDrill]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceHarvester] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}
  
  // Crustal - - -
  MODULE
  {
    name = Harvester
    title = Water Excavation
    drill = ImpactTransform
    length = 1.25
    type = 0
    resource = Water
    min_abundance = 0.01
    // https://www.nasa.gov/sites/default/files/atoms/files/mars_ice_drilling_assessment_v6_for_public_release.pdf shows
    // water harvesters from Ice at a rate of 50-400 L/day, as a middle ground we choose 65 L/day for the small harvester
    // which when scaled by factor 5 for the big harvester becomes 325 L/day.
    rate = 0.003 // 65 L/day / (6 hours/day * 3600 seconds/hour)
    // This is the maximum abundance on a random planet/moon
    // And the average on Duna poles, which are the only place where at the time writing higher than baseline water levels are modeled
    // And lower than what is found on Kerbin and Laythe
    abundance_rate = 0.1
    ec_rate = 1.0
  }

  MODULE
  {
    name = Harvester
    title = Ore Excavation
    drill = ImpactTransform
    length = 1.25
    type = 0
    resource = Ore
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }
  
  MODULE
  {
    name = Harvester
    title = Nitrogen Excavation
    drill = ImpactTransform
    length = 1.25
    type = 0
    resource = Nitrogen
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }
  
  MODULE
  {
    name = Configure
    title = Drill
    slots = 1

    SETUP
    {
      name = Water Extraction
      desc = Extract <b>Water</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Water
      }

      RESOURCE
      {
        name = Water
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Ore Extraction
      desc = Extract <b>Ore</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ore
      }

      RESOURCE
      {
        name = Ore
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Nitrogen Extraction
      desc = Extract <b>Nitrogen</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }

      RESOURCE
      {
        name = Nitrogen
        amount = 0
        maxAmount = 50
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = Harvester
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[kerbalism-minipump,kerbalism-radialpump]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceHarvester] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}
  !MODULE[ModuleAsteroidDrill] {}

  // Oceanic - - - 
  MODULE
  {
    name = Harvester
    title = Water Pump
    drill = ImpactTransform
    length = 1.25
    type = 1
    resource = Water
    min_abundance = 0.02
    rate = 0.003
    ec_rate = 1.0
  }
  
  MODULE
  {
    name = Harvester
    title = Nitrogen Pump
    drill = ImpactTransform
    length = 1.25
    type = 1
    resource = Nitrogen
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }
  
  MODULE
  {
    name = Harvester
    title = Ammonia Pump
    drill = ImpactTransform
    length = 1.25
    type = 1
    resource = Ammonia
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }

  MODULE
  {
    name = Configure
    title = Pump
    slots = 1

    SETUP
    {
      name = Water Extraction
      desc = Extract <b>Water</b> from the ocean.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Water
      }

      RESOURCE
      {
        name = Water
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Nitrogen Extraction
      desc = Extract <b>Nitrogen</b> from the ocean.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }

      RESOURCE
      {
        name = Nitrogen
        amount = 0
        maxAmount = 50
      }
    }
	
    SETUP
    {
      name = Ammonia Extraction
      desc = Extract <b>Ammonia</b> from the ocean.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ammonia
      }

      RESOURCE
      {
        name = Ammonia
        amount = 0
        maxAmount = 50
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = Harvester
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[RadialDrill,kerbalism-radialpump]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[Harvester],*
  {
    @rate *= 5
    @ec_rate *= 5
    @length = 5.0
  }
}


// ============================================================================
// atmospheric harvester
// the atmospheric experiment part is used as an atmospheric harvester
// ============================================================================

@PART[sensorAtmosphere]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = Harvester
    title = CO2 Filter
    type = 2
    resource = CarbonDioxide
    min_abundance = 0.0025
    min_pressure = 4.0
    rate = 0.2
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = Oxygen Filter
    type = 2
    resource = Oxygen
    min_abundance = 0.02
    min_pressure = 5.0
    rate = 0.25
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = Nitrogen Filter
    type = 2
    resource = Nitrogen
    min_abundance = 0.01
    min_pressure = 2.0
    rate = 0.35
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = Ammonia Filter
    type = 2
    resource = Ammonia
    min_abundance = 0.01
    min_pressure = 2.0
    rate = 0.35
    ec_rate = 0.5
  }

  MODULE
  {
    name = Configure
    title = Atmospheric Filter
    slots = 1

    SETUP
    {
      name = CO2 Filter
      desc = Extract <b>CO2</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = CarbonDioxide
      }
    }

    SETUP
    {
      name = Oxygen Filter
      desc = Extract <b>Oxygen</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Oxygen
      }
    }

    SETUP
    {
      name = Nitrogen Filter
      desc = Extract <b>Nitrogen</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }
    }

    SETUP
    {
      name = Ammonia Filter
      desc = Extract <b>Ammonia</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ammonia
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = Harvester
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.5
  }

  @mass = 0.2
}

// ============================================================================
// Habitats
// ============================================================================

@PART[kerbalism-gravityring]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  %CrewCapacity = 6
}

// ============================================================================
// Pseudo-resources used by processes
// ============================================================================

RESOURCE_DEFINITION
{
  name = _NonRegenScrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Scrubber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _PressureControl
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterRecycler
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _HumidityController
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteProcessor
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _RTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _FuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MonopropFuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterElectrolysis
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterElectrolysisO2Priority
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WaterElectrolysisH2Priority
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Sabatier
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SabatierH2OPriority
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Haber
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteIncinerator
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteCompressor
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _Anthraquinone
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _HydrazineProduction
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SOE
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MRE
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SCO
  density = 0.0
  isVisible = false
}

@RESOURCE_DEFINITION[Nitrogen]    // Remove Nitrogen from fuel flow priorities (Don't know what RoverDude was thinking??)
{
  @flowMode = ALL_VESSEL
}
